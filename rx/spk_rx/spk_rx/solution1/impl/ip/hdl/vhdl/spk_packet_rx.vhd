-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spk_packet_rx is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pre_in_TUSER : IN STD_LOGIC_VECTOR (4 downto 0);
    pre_in_TVALID : IN STD_LOGIC;
    pre_in_TREADY : OUT STD_LOGIC;
    pre_in_TLAST : IN STD_LOGIC;
    pre_in_TID : IN STD_LOGIC_VECTOR (5 downto 0);
    pre_in_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    post_in_TUSER : IN STD_LOGIC_VECTOR (4 downto 0);
    post_in_TVALID : IN STD_LOGIC;
    post_in_TREADY : OUT STD_LOGIC;
    post_in_TLAST : IN STD_LOGIC;
    post_in_TID : IN STD_LOGIC_VECTOR (5 downto 0);
    post_in_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    time_stamp_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    time_stamp_V_TVALID : IN STD_LOGIC;
    time_stamp_V_TREADY : OUT STD_LOGIC;
    spk_out_stream_TID : OUT STD_LOGIC_VECTOR (5 downto 0);
    spk_out_stream_TVALID : OUT STD_LOGIC;
    spk_out_stream_TREADY : IN STD_LOGIC;
    spk_out_stream_TUSER : OUT STD_LOGIC_VECTOR (31 downto 0);
    spk_out_stream_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0) );
end;


architecture behav of spk_packet_rx is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "spk_packet_rx,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.350000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=2,HLS_SYN_FF=678,HLS_SYN_LUT=436}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_pp0_stg0_fsm_11 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_st14_fsm_12 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv11_13 : STD_LOGIC_VECTOR (10 downto 0) := "00000010011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_30 : BOOLEAN;
    signal pre_in_V_user_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal pre_in_V_user_V_0_vld_in : STD_LOGIC;
    signal pre_in_V_user_V_0_vld_out : STD_LOGIC;
    signal pre_in_V_user_V_0_ack_out : STD_LOGIC;
    signal pre_in_V_user_V_0_data_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal pre_in_V_user_V_0_areset_d : STD_LOGIC;
    signal pre_in_V_user_V_0_in_rdy : STD_LOGIC := '0';
    signal pre_in_V_user_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal pre_in_V_user_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal pre_in_V_last_0_vld_in : STD_LOGIC;
    signal pre_in_V_last_0_vld_out : STD_LOGIC;
    signal pre_in_V_last_0_ack_out : STD_LOGIC;
    signal pre_in_V_last_0_areset_d : STD_LOGIC;
    signal pre_in_V_last_0_in_rdy : STD_LOGIC := '0';
    signal pre_in_V_last_0_has_vld_data_reg_i : STD_LOGIC;
    signal pre_in_V_last_0_has_vld_data_reg : STD_LOGIC := '0';
    signal pre_in_V_id_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal pre_in_V_id_V_0_vld_in : STD_LOGIC;
    signal pre_in_V_id_V_0_vld_out : STD_LOGIC;
    signal pre_in_V_id_V_0_ack_out : STD_LOGIC;
    signal pre_in_V_id_V_0_data_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal pre_in_V_id_V_0_areset_d : STD_LOGIC;
    signal pre_in_V_id_V_0_in_rdy : STD_LOGIC := '0';
    signal pre_in_V_id_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal pre_in_V_id_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal pre_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (95 downto 0);
    signal pre_in_V_data_V_0_vld_in : STD_LOGIC;
    signal pre_in_V_data_V_0_vld_out : STD_LOGIC;
    signal pre_in_V_data_V_0_ack_out : STD_LOGIC;
    signal pre_in_V_data_V_0_data_reg : STD_LOGIC_VECTOR (95 downto 0);
    signal pre_in_V_data_V_0_areset_d : STD_LOGIC;
    signal pre_in_V_data_V_0_in_rdy : STD_LOGIC := '0';
    signal pre_in_V_data_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal pre_in_V_data_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal post_in_V_user_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal post_in_V_user_V_0_vld_in : STD_LOGIC;
    signal post_in_V_user_V_0_vld_out : STD_LOGIC;
    signal post_in_V_user_V_0_ack_out : STD_LOGIC;
    signal post_in_V_user_V_0_data_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal post_in_V_user_V_0_areset_d : STD_LOGIC;
    signal post_in_V_user_V_0_in_rdy : STD_LOGIC := '0';
    signal post_in_V_user_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal post_in_V_user_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal post_in_V_last_0_data_out : STD_LOGIC;
    signal post_in_V_last_0_vld_in : STD_LOGIC;
    signal post_in_V_last_0_vld_out : STD_LOGIC;
    signal post_in_V_last_0_ack_out : STD_LOGIC;
    signal post_in_V_last_0_data_reg : STD_LOGIC;
    signal post_in_V_last_0_areset_d : STD_LOGIC;
    signal post_in_V_last_0_in_rdy : STD_LOGIC := '0';
    signal post_in_V_last_0_has_vld_data_reg_i : STD_LOGIC;
    signal post_in_V_last_0_has_vld_data_reg : STD_LOGIC := '0';
    signal post_in_V_id_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal post_in_V_id_V_0_vld_in : STD_LOGIC;
    signal post_in_V_id_V_0_vld_out : STD_LOGIC;
    signal post_in_V_id_V_0_ack_out : STD_LOGIC;
    signal post_in_V_id_V_0_data_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal post_in_V_id_V_0_areset_d : STD_LOGIC;
    signal post_in_V_id_V_0_in_rdy : STD_LOGIC := '0';
    signal post_in_V_id_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal post_in_V_id_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal post_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (95 downto 0);
    signal post_in_V_data_V_0_vld_in : STD_LOGIC;
    signal post_in_V_data_V_0_vld_out : STD_LOGIC;
    signal post_in_V_data_V_0_ack_out : STD_LOGIC;
    signal post_in_V_data_V_0_data_reg : STD_LOGIC_VECTOR (95 downto 0);
    signal post_in_V_data_V_0_areset_d : STD_LOGIC;
    signal post_in_V_data_V_0_in_rdy : STD_LOGIC := '0';
    signal post_in_V_data_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal post_in_V_data_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal time_stamp_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal time_stamp_V_0_vld_in : STD_LOGIC;
    signal time_stamp_V_0_vld_out : STD_LOGIC;
    signal time_stamp_V_0_ack_out : STD_LOGIC;
    signal time_stamp_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal time_stamp_V_0_areset_d : STD_LOGIC;
    signal time_stamp_V_0_in_rdy : STD_LOGIC := '0';
    signal time_stamp_V_0_has_vld_data_reg_i : STD_LOGIC;
    signal time_stamp_V_0_has_vld_data_reg : STD_LOGIC := '0';
    signal spk_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal spk_V_ce0 : STD_LOGIC;
    signal spk_V_we0 : STD_LOGIC;
    signal spk_V_d0 : STD_LOGIC_VECTOR (95 downto 0);
    signal spk_V_q0 : STD_LOGIC_VECTOR (95 downto 0);
    signal pre_in_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_352 : BOOLEAN;
    signal grp_nbreadreq_fu_76_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal post_in_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_365 : BOOLEAN;
    signal grp_nbreadreq_fu_102_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal time_stamp_V_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_377 : BOOLEAN;
    signal spk_out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_11 : STD_LOGIC;
    signal ap_sig_389 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal j1_reg_176 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_278 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_401 : BOOLEAN;
    signal empty_reg_282_0 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_282_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_282_3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_user_V_reg_289 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_422 : BOOLEAN;
    signal tmp_data_V_reg_294 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_270_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_304 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_435 : BOOLEAN;
    signal ap_sig_440 : BOOLEAN;
    signal empty_2_reg_313_0 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_2_reg_313_1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_2_reg_313_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_2_reg_313_3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_id_V_reg_321 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_461 : BOOLEAN;
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_reg_331 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_472 : BOOLEAN;
    signal ap_sig_477 : BOOLEAN;
    signal tmp_6_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_spk_out_stream_TREADY : STD_LOGIC;
    signal j_fu_258_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_351 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_356 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_phi_fu_180_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_cast_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_512 : BOOLEAN;
    signal tmp_12_cast_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_spk_out_stream_TREADY : STD_LOGIC := '0';
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_cast_fu_230_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_234_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_cast_fu_244_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_248_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_12 : STD_LOGIC;
    signal ap_sig_624 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_214_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_270_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_270_p20 : STD_LOGIC_VECTOR (10 downto 0);

    component spk_packet_rx_mul_6ns_6ns_11_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component spk_packet_rx_mac_muladd_6ns_6ns_5ns_11_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component spk_packet_rx_spk_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (95 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;



begin
    spk_V_U : component spk_packet_rx_spk_V
    generic map (
        DataWidth => 96,
        AddressRange => 608,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => spk_V_address0,
        ce0 => spk_V_ce0,
        we0 => spk_V_we0,
        d0 => spk_V_d0,
        q0 => spk_V_q0);

    spk_packet_rx_mul_6ns_6ns_11_3_U1 : component spk_packet_rx_mul_6ns_6ns_11_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p2);

    spk_packet_rx_mac_muladd_6ns_6ns_5ns_11_3_U2 : component spk_packet_rx_mac_muladd_6ns_6ns_5ns_11_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_270_p0,
        din1 => grp_fu_270_p1,
        din2 => grp_fu_270_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_spk_out_stream_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_spk_out_stream_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_spk_out_stream_TREADY)))))) then 
                    ap_reg_ioackin_spk_out_stream_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = spk_out_stream_TREADY)))) then 
                    ap_reg_ioackin_spk_out_stream_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_spk_out_stream_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_264_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = empty_2_reg_313_1)) and not(ap_sig_477))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_spk_out_stream_TREADY))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = empty_2_reg_313_1)) and not(ap_sig_477))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    post_in_V_data_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                post_in_V_data_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                post_in_V_data_V_0_has_vld_data_reg <= post_in_V_data_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    post_in_V_data_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                post_in_V_data_V_0_in_rdy <= ap_const_logic_0;
            else
                post_in_V_data_V_0_in_rdy <= (post_in_V_data_V_0_ack_out or not(post_in_V_data_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    post_in_V_id_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                post_in_V_id_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                post_in_V_id_V_0_has_vld_data_reg <= post_in_V_id_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    post_in_V_id_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                post_in_V_id_V_0_in_rdy <= ap_const_logic_0;
            else
                post_in_V_id_V_0_in_rdy <= (post_in_V_id_V_0_ack_out or not(post_in_V_id_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    post_in_V_last_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                post_in_V_last_0_has_vld_data_reg <= ap_const_logic_0;
            else
                post_in_V_last_0_has_vld_data_reg <= post_in_V_last_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    post_in_V_last_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                post_in_V_last_0_in_rdy <= ap_const_logic_0;
            else
                post_in_V_last_0_in_rdy <= (post_in_V_last_0_ack_out or not(post_in_V_last_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    post_in_V_user_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                post_in_V_user_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                post_in_V_user_V_0_has_vld_data_reg <= post_in_V_user_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    post_in_V_user_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                post_in_V_user_V_0_in_rdy <= ap_const_logic_0;
            else
                post_in_V_user_V_0_in_rdy <= (post_in_V_user_V_0_ack_out or not(post_in_V_user_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    pre_in_V_data_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pre_in_V_data_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                pre_in_V_data_V_0_has_vld_data_reg <= pre_in_V_data_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    pre_in_V_data_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pre_in_V_data_V_0_in_rdy <= ap_const_logic_0;
            else
                pre_in_V_data_V_0_in_rdy <= (pre_in_V_data_V_0_ack_out or not(pre_in_V_data_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    pre_in_V_id_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pre_in_V_id_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                pre_in_V_id_V_0_has_vld_data_reg <= pre_in_V_id_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    pre_in_V_id_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pre_in_V_id_V_0_in_rdy <= ap_const_logic_0;
            else
                pre_in_V_id_V_0_in_rdy <= (pre_in_V_id_V_0_ack_out or not(pre_in_V_id_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    pre_in_V_last_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pre_in_V_last_0_has_vld_data_reg <= ap_const_logic_0;
            else
                pre_in_V_last_0_has_vld_data_reg <= pre_in_V_last_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    pre_in_V_last_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pre_in_V_last_0_in_rdy <= ap_const_logic_0;
            else
                pre_in_V_last_0_in_rdy <= (pre_in_V_last_0_ack_out or not(pre_in_V_last_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    pre_in_V_user_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pre_in_V_user_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                pre_in_V_user_V_0_has_vld_data_reg <= pre_in_V_user_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    pre_in_V_user_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pre_in_V_user_V_0_in_rdy <= ap_const_logic_0;
            else
                pre_in_V_user_V_0_in_rdy <= (pre_in_V_user_V_0_ack_out or not(pre_in_V_user_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    time_stamp_V_0_has_vld_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                time_stamp_V_0_has_vld_data_reg <= ap_const_logic_0;
            else
                time_stamp_V_0_has_vld_data_reg <= time_stamp_V_0_has_vld_data_reg_i;
            end if;
        end if;
    end process;


    time_stamp_V_0_in_rdy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                time_stamp_V_0_in_rdy <= ap_const_logic_0;
            else
                time_stamp_V_0_in_rdy <= (time_stamp_V_0_ack_out or not(time_stamp_V_0_has_vld_data_reg_i));
            end if;
        end if;
    end process;


    j1_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_spk_out_stream_TREADY))) and (ap_const_lv1_0 = exitcond_reg_356))) then 
                j1_reg_176 <= j_reg_351;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = empty_2_reg_313_1)) and not(ap_sig_477))) then 
                j1_reg_176 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = grp_nbreadreq_fu_102_p6)) and not(ap_sig_440))) then
                empty_2_reg_313_0 <= post_in_V_user_V_0_data_out;
                empty_2_reg_313_1 <= (0=>post_in_V_last_0_data_out, others=>'-');
                empty_2_reg_313_2 <= post_in_V_id_V_0_data_out;
                empty_2_reg_313_3 <= post_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(ap_sig_401))) then
                empty_reg_282_0 <= pre_in_V_user_V_0_data_out;
                empty_reg_282_2 <= pre_in_V_id_V_0_data_out;
                empty_reg_282_3 <= pre_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_spk_out_stream_TREADY))))) then
                exitcond_reg_356 <= exitcond_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_spk_out_stream_TREADY))))) then
                j_reg_351 <= j_fu_258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_const_logic_1)) then
                post_in_V_data_V_0_areset_d <= ap_rst_n_inv;
                post_in_V_id_V_0_areset_d <= ap_rst_n_inv;
                post_in_V_last_0_areset_d <= ap_rst_n_inv;
                post_in_V_user_V_0_areset_d <= ap_rst_n_inv;
                pre_in_V_data_V_0_areset_d <= ap_rst_n_inv;
                pre_in_V_id_V_0_areset_d <= ap_rst_n_inv;
                pre_in_V_last_0_areset_d <= ap_rst_n_inv;
                pre_in_V_user_V_0_areset_d <= ap_rst_n_inv;
                time_stamp_V_0_areset_d <= ap_rst_n_inv;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = post_in_V_data_V_0_vld_in) and (ap_const_logic_1 = post_in_V_data_V_0_in_rdy))) then
                post_in_V_data_V_0_data_reg <= post_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = post_in_V_id_V_0_vld_in) and (ap_const_logic_1 = post_in_V_id_V_0_in_rdy))) then
                post_in_V_id_V_0_data_reg <= post_in_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = post_in_V_last_0_vld_in) and (ap_const_logic_1 = post_in_V_last_0_in_rdy))) then
                post_in_V_last_0_data_reg <= post_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = post_in_V_user_V_0_vld_in) and (ap_const_logic_1 = post_in_V_user_V_0_in_rdy))) then
                post_in_V_user_V_0_data_reg <= post_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = pre_in_V_data_V_0_vld_in) and (ap_const_logic_1 = pre_in_V_data_V_0_in_rdy))) then
                pre_in_V_data_V_0_data_reg <= pre_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = pre_in_V_id_V_0_vld_in) and (ap_const_logic_1 = pre_in_V_id_V_0_in_rdy))) then
                pre_in_V_id_V_0_data_reg <= pre_in_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = pre_in_V_user_V_0_vld_in) and (ap_const_logic_1 = pre_in_V_user_V_0_in_rdy))) then
                pre_in_V_user_V_0_data_reg <= pre_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = time_stamp_V_0_vld_in) and (ap_const_logic_1 = time_stamp_V_0_in_rdy))) then
                time_stamp_V_0_data_reg <= time_stamp_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_2_reg_331 <= grp_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = empty_2_reg_313_1)) and not(ap_sig_477))) then
                tmp_6_reg_341 <= time_stamp_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_data_V_reg_294 <= empty_reg_282_3;
                tmp_user_V_reg_289 <= empty_reg_282_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_id_V_reg_321 <= empty_2_reg_313_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_401))) then
                tmp_reg_278 <= grp_nbreadreq_fu_76_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_s_reg_304 <= grp_fu_270_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_nbreadreq_fu_76_p6, grp_nbreadreq_fu_102_p6, ap_sig_cseq_ST_pp0_stg0_fsm_11, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it0, ap_sig_401, ap_sig_440, empty_2_reg_313_1, ap_sig_477, ap_sig_ioackin_spk_out_stream_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0) and not(ap_sig_401))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                elsif ((not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(ap_sig_401))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (((ap_const_lv1_0 = grp_nbreadreq_fu_102_p6) and not(ap_sig_440))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_12;
                elsif ((not((ap_const_lv1_0 = grp_nbreadreq_fu_102_p6)) and not(ap_sig_440))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                if ((not((ap_const_lv1_0 = empty_2_reg_313_1)) and not(ap_sig_477))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_11;
                elsif (((ap_const_lv1_0 = empty_2_reg_313_1) and not(ap_sig_477))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_pp0_stg0_fsm_11 => 
                if (not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_spk_out_stream_TREADY))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_11;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_spk_out_stream_TREADY))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_11;
                end if;
            when ap_ST_st14_fsm_12 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st14_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st14_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_30_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_30 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_352_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_352 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_365_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_365 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_377_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_377 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_389_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_389 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_401_assign_proc : process(pre_in_V_user_V_0_vld_out, grp_nbreadreq_fu_76_p6)
    begin
                ap_sig_401 <= (not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and (pre_in_V_user_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_sig_422_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_422 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_435_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_435 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_440_assign_proc : process(post_in_V_user_V_0_vld_out, grp_nbreadreq_fu_102_p6)
    begin
                ap_sig_440 <= (not((ap_const_lv1_0 = grp_nbreadreq_fu_102_p6)) and (post_in_V_user_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_sig_461_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_461 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_472_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_472 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_477_assign_proc : process(time_stamp_V_0_vld_out, empty_2_reg_313_1)
    begin
                ap_sig_477 <= (not((ap_const_lv1_0 = empty_2_reg_313_1)) and (time_stamp_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_sig_512_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_512 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_624_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_624 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_11_assign_proc : process(ap_sig_389)
    begin
        if (ap_sig_389) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_472)
    begin
        if (ap_sig_472) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_377)
    begin
        if (ap_sig_377) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_12_assign_proc : process(ap_sig_624)
    begin
        if (ap_sig_624) then 
            ap_sig_cseq_ST_st14_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_30)
    begin
        if (ap_sig_30) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_352)
    begin
        if (ap_sig_352) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_422)
    begin
        if (ap_sig_422) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_435)
    begin
        if (ap_sig_435) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_512)
    begin
        if (ap_sig_512) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_365)
    begin
        if (ap_sig_365) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_461)
    begin
        if (ap_sig_461) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_spk_out_stream_TREADY_assign_proc : process(spk_out_stream_TREADY, ap_reg_ioackin_spk_out_stream_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_spk_out_stream_TREADY)) then 
            ap_sig_ioackin_spk_out_stream_TREADY <= spk_out_stream_TREADY;
        else 
            ap_sig_ioackin_spk_out_stream_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_fu_264_p2 <= "1" when (j1_phi_fu_180_p4 = ap_const_lv5_12) else "0";
    grp_fu_214_p0 <= grp_fu_214_p00(6 - 1 downto 0);
    grp_fu_214_p00 <= std_logic_vector(resize(unsigned(empty_2_reg_313_2),11));
    grp_fu_214_p1 <= ap_const_lv11_13(6 - 1 downto 0);
    grp_fu_270_p0 <= grp_fu_270_p00(6 - 1 downto 0);
    grp_fu_270_p00 <= std_logic_vector(resize(unsigned(empty_reg_282_2),11));
    grp_fu_270_p1 <= ap_const_lv11_13(6 - 1 downto 0);
    grp_fu_270_p2 <= grp_fu_270_p20(5 - 1 downto 0);
    grp_fu_270_p20 <= std_logic_vector(resize(unsigned(tmp_user_V_reg_289),11));
    grp_nbreadreq_fu_102_p6 <= (0=>(post_in_V_user_V_0_vld_out and post_in_V_last_0_vld_out and post_in_V_id_V_0_vld_out and post_in_V_data_V_0_vld_out), others=>'-');
    grp_nbreadreq_fu_76_p6 <= (0=>(pre_in_V_user_V_0_vld_out and pre_in_V_last_0_vld_out and pre_in_V_id_V_0_vld_out and pre_in_V_data_V_0_vld_out), others=>'-');

    j1_phi_fu_180_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_11, ap_reg_ppiten_pp0_it1, j1_reg_176, j_reg_351, exitcond_reg_356)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_356))) then 
            j1_phi_fu_180_p4 <= j_reg_351;
        else 
            j1_phi_fu_180_p4 <= j1_reg_176;
        end if; 
    end process;

    j_fu_258_p2 <= std_logic_vector(unsigned(j1_phi_fu_180_p4) + unsigned(ap_const_lv5_1));

    post_in_TDATA_blk_n_assign_proc : process(post_in_V_data_V_0_vld_out, ap_sig_cseq_ST_st7_fsm_6, grp_nbreadreq_fu_102_p6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = grp_nbreadreq_fu_102_p6)))) then 
            post_in_TDATA_blk_n <= post_in_V_data_V_0_vld_out;
        else 
            post_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    post_in_TREADY <= post_in_V_data_V_0_in_rdy;

    post_in_V_data_V_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_nbreadreq_fu_102_p6, ap_sig_440)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = grp_nbreadreq_fu_102_p6)) and not(ap_sig_440))) then 
            post_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            post_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    post_in_V_data_V_0_data_out_assign_proc : process(post_in_TDATA, post_in_V_data_V_0_data_reg, post_in_V_data_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = post_in_V_data_V_0_has_vld_data_reg)) then 
            post_in_V_data_V_0_data_out <= post_in_V_data_V_0_data_reg;
        else 
            post_in_V_data_V_0_data_out <= post_in_TDATA;
        end if; 
    end process;


    post_in_V_data_V_0_has_vld_data_reg_i_assign_proc : process(post_in_V_data_V_0_vld_in, post_in_V_data_V_0_ack_out, post_in_V_data_V_0_in_rdy, post_in_V_data_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = post_in_V_data_V_0_vld_in) and (ap_const_logic_0 = post_in_V_data_V_0_ack_out) and (ap_const_logic_1 = post_in_V_data_V_0_in_rdy))) then 
            post_in_V_data_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = post_in_V_data_V_0_ack_out) and (ap_const_logic_1 = post_in_V_data_V_0_has_vld_data_reg) and ((ap_const_logic_0 = post_in_V_data_V_0_vld_in) or (ap_const_logic_0 = post_in_V_data_V_0_in_rdy)))) then 
            post_in_V_data_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            post_in_V_data_V_0_has_vld_data_reg_i <= post_in_V_data_V_0_has_vld_data_reg;
        end if; 
    end process;

    post_in_V_data_V_0_vld_in <= post_in_TVALID;
    post_in_V_data_V_0_vld_out <= ((post_in_TVALID or post_in_V_data_V_0_has_vld_data_reg) and not(post_in_V_data_V_0_areset_d));

    post_in_V_id_V_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_nbreadreq_fu_102_p6, ap_sig_440)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = grp_nbreadreq_fu_102_p6)) and not(ap_sig_440))) then 
            post_in_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            post_in_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    post_in_V_id_V_0_data_out_assign_proc : process(post_in_TID, post_in_V_id_V_0_data_reg, post_in_V_id_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = post_in_V_id_V_0_has_vld_data_reg)) then 
            post_in_V_id_V_0_data_out <= post_in_V_id_V_0_data_reg;
        else 
            post_in_V_id_V_0_data_out <= post_in_TID;
        end if; 
    end process;


    post_in_V_id_V_0_has_vld_data_reg_i_assign_proc : process(post_in_V_id_V_0_vld_in, post_in_V_id_V_0_ack_out, post_in_V_id_V_0_in_rdy, post_in_V_id_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = post_in_V_id_V_0_vld_in) and (ap_const_logic_0 = post_in_V_id_V_0_ack_out) and (ap_const_logic_1 = post_in_V_id_V_0_in_rdy))) then 
            post_in_V_id_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = post_in_V_id_V_0_ack_out) and (ap_const_logic_1 = post_in_V_id_V_0_has_vld_data_reg) and ((ap_const_logic_0 = post_in_V_id_V_0_vld_in) or (ap_const_logic_0 = post_in_V_id_V_0_in_rdy)))) then 
            post_in_V_id_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            post_in_V_id_V_0_has_vld_data_reg_i <= post_in_V_id_V_0_has_vld_data_reg;
        end if; 
    end process;

    post_in_V_id_V_0_vld_in <= post_in_TVALID;
    post_in_V_id_V_0_vld_out <= ((post_in_TVALID or post_in_V_id_V_0_has_vld_data_reg) and not(post_in_V_id_V_0_areset_d));

    post_in_V_last_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_nbreadreq_fu_102_p6, ap_sig_440)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = grp_nbreadreq_fu_102_p6)) and not(ap_sig_440))) then 
            post_in_V_last_0_ack_out <= ap_const_logic_1;
        else 
            post_in_V_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    post_in_V_last_0_data_out_assign_proc : process(post_in_TLAST, post_in_V_last_0_data_reg, post_in_V_last_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = post_in_V_last_0_has_vld_data_reg)) then 
            post_in_V_last_0_data_out <= post_in_V_last_0_data_reg;
        else 
            post_in_V_last_0_data_out <= post_in_TLAST;
        end if; 
    end process;


    post_in_V_last_0_has_vld_data_reg_i_assign_proc : process(post_in_V_last_0_vld_in, post_in_V_last_0_ack_out, post_in_V_last_0_in_rdy, post_in_V_last_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = post_in_V_last_0_vld_in) and (ap_const_logic_0 = post_in_V_last_0_ack_out) and (ap_const_logic_1 = post_in_V_last_0_in_rdy))) then 
            post_in_V_last_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = post_in_V_last_0_ack_out) and (ap_const_logic_1 = post_in_V_last_0_has_vld_data_reg) and ((ap_const_logic_0 = post_in_V_last_0_vld_in) or (ap_const_logic_0 = post_in_V_last_0_in_rdy)))) then 
            post_in_V_last_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            post_in_V_last_0_has_vld_data_reg_i <= post_in_V_last_0_has_vld_data_reg;
        end if; 
    end process;

    post_in_V_last_0_vld_in <= post_in_TVALID;
    post_in_V_last_0_vld_out <= ((post_in_TVALID or post_in_V_last_0_has_vld_data_reg) and not(post_in_V_last_0_areset_d));

    post_in_V_user_V_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_nbreadreq_fu_102_p6, ap_sig_440)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = grp_nbreadreq_fu_102_p6)) and not(ap_sig_440))) then 
            post_in_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            post_in_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    post_in_V_user_V_0_data_out_assign_proc : process(post_in_TUSER, post_in_V_user_V_0_data_reg, post_in_V_user_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = post_in_V_user_V_0_has_vld_data_reg)) then 
            post_in_V_user_V_0_data_out <= post_in_V_user_V_0_data_reg;
        else 
            post_in_V_user_V_0_data_out <= post_in_TUSER;
        end if; 
    end process;


    post_in_V_user_V_0_has_vld_data_reg_i_assign_proc : process(post_in_V_user_V_0_vld_in, post_in_V_user_V_0_ack_out, post_in_V_user_V_0_in_rdy, post_in_V_user_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = post_in_V_user_V_0_vld_in) and (ap_const_logic_0 = post_in_V_user_V_0_ack_out) and (ap_const_logic_1 = post_in_V_user_V_0_in_rdy))) then 
            post_in_V_user_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = post_in_V_user_V_0_ack_out) and (ap_const_logic_1 = post_in_V_user_V_0_has_vld_data_reg) and ((ap_const_logic_0 = post_in_V_user_V_0_vld_in) or (ap_const_logic_0 = post_in_V_user_V_0_in_rdy)))) then 
            post_in_V_user_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            post_in_V_user_V_0_has_vld_data_reg_i <= post_in_V_user_V_0_has_vld_data_reg;
        end if; 
    end process;

    post_in_V_user_V_0_vld_in <= post_in_TVALID;
    post_in_V_user_V_0_vld_out <= ((post_in_TVALID or post_in_V_user_V_0_has_vld_data_reg) and not(post_in_V_user_V_0_areset_d));

    pre_in_TDATA_blk_n_assign_proc : process(pre_in_V_data_V_0_vld_out, ap_sig_cseq_ST_st2_fsm_1, grp_nbreadreq_fu_76_p6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)))) then 
            pre_in_TDATA_blk_n <= pre_in_V_data_V_0_vld_out;
        else 
            pre_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pre_in_TREADY <= pre_in_V_data_V_0_in_rdy;

    pre_in_V_data_V_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_nbreadreq_fu_76_p6, ap_sig_401)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(ap_sig_401))) then 
            pre_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            pre_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    pre_in_V_data_V_0_data_out_assign_proc : process(pre_in_TDATA, pre_in_V_data_V_0_data_reg, pre_in_V_data_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = pre_in_V_data_V_0_has_vld_data_reg)) then 
            pre_in_V_data_V_0_data_out <= pre_in_V_data_V_0_data_reg;
        else 
            pre_in_V_data_V_0_data_out <= pre_in_TDATA;
        end if; 
    end process;


    pre_in_V_data_V_0_has_vld_data_reg_i_assign_proc : process(pre_in_V_data_V_0_vld_in, pre_in_V_data_V_0_ack_out, pre_in_V_data_V_0_in_rdy, pre_in_V_data_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = pre_in_V_data_V_0_vld_in) and (ap_const_logic_0 = pre_in_V_data_V_0_ack_out) and (ap_const_logic_1 = pre_in_V_data_V_0_in_rdy))) then 
            pre_in_V_data_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = pre_in_V_data_V_0_ack_out) and (ap_const_logic_1 = pre_in_V_data_V_0_has_vld_data_reg) and ((ap_const_logic_0 = pre_in_V_data_V_0_vld_in) or (ap_const_logic_0 = pre_in_V_data_V_0_in_rdy)))) then 
            pre_in_V_data_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            pre_in_V_data_V_0_has_vld_data_reg_i <= pre_in_V_data_V_0_has_vld_data_reg;
        end if; 
    end process;

    pre_in_V_data_V_0_vld_in <= pre_in_TVALID;
    pre_in_V_data_V_0_vld_out <= ((pre_in_TVALID or pre_in_V_data_V_0_has_vld_data_reg) and not(pre_in_V_data_V_0_areset_d));

    pre_in_V_id_V_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_nbreadreq_fu_76_p6, ap_sig_401)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(ap_sig_401))) then 
            pre_in_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            pre_in_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    pre_in_V_id_V_0_data_out_assign_proc : process(pre_in_TID, pre_in_V_id_V_0_data_reg, pre_in_V_id_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = pre_in_V_id_V_0_has_vld_data_reg)) then 
            pre_in_V_id_V_0_data_out <= pre_in_V_id_V_0_data_reg;
        else 
            pre_in_V_id_V_0_data_out <= pre_in_TID;
        end if; 
    end process;


    pre_in_V_id_V_0_has_vld_data_reg_i_assign_proc : process(pre_in_V_id_V_0_vld_in, pre_in_V_id_V_0_ack_out, pre_in_V_id_V_0_in_rdy, pre_in_V_id_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = pre_in_V_id_V_0_vld_in) and (ap_const_logic_0 = pre_in_V_id_V_0_ack_out) and (ap_const_logic_1 = pre_in_V_id_V_0_in_rdy))) then 
            pre_in_V_id_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = pre_in_V_id_V_0_ack_out) and (ap_const_logic_1 = pre_in_V_id_V_0_has_vld_data_reg) and ((ap_const_logic_0 = pre_in_V_id_V_0_vld_in) or (ap_const_logic_0 = pre_in_V_id_V_0_in_rdy)))) then 
            pre_in_V_id_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            pre_in_V_id_V_0_has_vld_data_reg_i <= pre_in_V_id_V_0_has_vld_data_reg;
        end if; 
    end process;

    pre_in_V_id_V_0_vld_in <= pre_in_TVALID;
    pre_in_V_id_V_0_vld_out <= ((pre_in_TVALID or pre_in_V_id_V_0_has_vld_data_reg) and not(pre_in_V_id_V_0_areset_d));

    pre_in_V_last_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_nbreadreq_fu_76_p6, ap_sig_401)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(ap_sig_401))) then 
            pre_in_V_last_0_ack_out <= ap_const_logic_1;
        else 
            pre_in_V_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    pre_in_V_last_0_has_vld_data_reg_i_assign_proc : process(pre_in_V_last_0_vld_in, pre_in_V_last_0_ack_out, pre_in_V_last_0_in_rdy, pre_in_V_last_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = pre_in_V_last_0_vld_in) and (ap_const_logic_0 = pre_in_V_last_0_ack_out) and (ap_const_logic_1 = pre_in_V_last_0_in_rdy))) then 
            pre_in_V_last_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = pre_in_V_last_0_ack_out) and (ap_const_logic_1 = pre_in_V_last_0_has_vld_data_reg) and ((ap_const_logic_0 = pre_in_V_last_0_vld_in) or (ap_const_logic_0 = pre_in_V_last_0_in_rdy)))) then 
            pre_in_V_last_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            pre_in_V_last_0_has_vld_data_reg_i <= pre_in_V_last_0_has_vld_data_reg;
        end if; 
    end process;

    pre_in_V_last_0_vld_in <= pre_in_TVALID;
    pre_in_V_last_0_vld_out <= ((pre_in_TVALID or pre_in_V_last_0_has_vld_data_reg) and not(pre_in_V_last_0_areset_d));

    pre_in_V_user_V_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_nbreadreq_fu_76_p6, ap_sig_401)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(ap_sig_401))) then 
            pre_in_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            pre_in_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    pre_in_V_user_V_0_data_out_assign_proc : process(pre_in_TUSER, pre_in_V_user_V_0_data_reg, pre_in_V_user_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = pre_in_V_user_V_0_has_vld_data_reg)) then 
            pre_in_V_user_V_0_data_out <= pre_in_V_user_V_0_data_reg;
        else 
            pre_in_V_user_V_0_data_out <= pre_in_TUSER;
        end if; 
    end process;


    pre_in_V_user_V_0_has_vld_data_reg_i_assign_proc : process(pre_in_V_user_V_0_vld_in, pre_in_V_user_V_0_ack_out, pre_in_V_user_V_0_in_rdy, pre_in_V_user_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = pre_in_V_user_V_0_vld_in) and (ap_const_logic_0 = pre_in_V_user_V_0_ack_out) and (ap_const_logic_1 = pre_in_V_user_V_0_in_rdy))) then 
            pre_in_V_user_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = pre_in_V_user_V_0_ack_out) and (ap_const_logic_1 = pre_in_V_user_V_0_has_vld_data_reg) and ((ap_const_logic_0 = pre_in_V_user_V_0_vld_in) or (ap_const_logic_0 = pre_in_V_user_V_0_in_rdy)))) then 
            pre_in_V_user_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            pre_in_V_user_V_0_has_vld_data_reg_i <= pre_in_V_user_V_0_has_vld_data_reg;
        end if; 
    end process;

    pre_in_V_user_V_0_vld_in <= pre_in_TVALID;
    pre_in_V_user_V_0_vld_out <= ((pre_in_TVALID or pre_in_V_user_V_0_has_vld_data_reg) and not(pre_in_V_user_V_0_areset_d));

    spk_V_address0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_pp0_stg0_fsm_11, ap_reg_ppiten_pp0_it0, tmp_10_cast_fu_203_p1, ap_sig_cseq_ST_st6_fsm_5, tmp_12_cast_fu_239_p1, tmp_13_cast_fu_253_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            spk_V_address0 <= tmp_12_cast_fu_239_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            spk_V_address0 <= tmp_10_cast_fu_203_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            spk_V_address0 <= tmp_13_cast_fu_253_p1(10 - 1 downto 0);
        else 
            spk_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    spk_V_ce0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_pp0_stg0_fsm_11, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it0, ap_sig_477, ap_sig_ioackin_spk_out_stream_TREADY, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not(ap_sig_477)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_sig_ioackin_spk_out_stream_TREADY)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            spk_V_ce0 <= ap_const_logic_1;
        else 
            spk_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    spk_V_d0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, tmp_data_V_reg_294, empty_2_reg_313_3, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            spk_V_d0 <= empty_2_reg_313_3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            spk_V_d0 <= tmp_data_V_reg_294;
        else 
            spk_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    spk_V_we0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, tmp_reg_278, ap_sig_477, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not(ap_sig_477)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_reg_278))))) then 
            spk_V_we0 <= ap_const_logic_1;
        else 
            spk_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    spk_out_stream_TDATA <= spk_V_q0;

    spk_out_stream_TDATA_blk_n_assign_proc : process(spk_out_stream_TREADY, ap_sig_cseq_ST_pp0_stg0_fsm_11, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            spk_out_stream_TDATA_blk_n <= spk_out_stream_TREADY;
        else 
            spk_out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    spk_out_stream_TID <= tmp_id_V_reg_321;
    spk_out_stream_TUSER <= tmp_6_reg_341;

    spk_out_stream_TVALID_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_11, ap_reg_ppiten_pp0_it1, ap_reg_ioackin_spk_out_stream_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ioackin_spk_out_stream_TREADY)))) then 
            spk_out_stream_TVALID <= ap_const_logic_1;
        else 
            spk_out_stream_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    time_stamp_V_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, empty_2_reg_313_1, ap_sig_477)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = empty_2_reg_313_1)) and not(ap_sig_477))) then 
            time_stamp_V_0_ack_out <= ap_const_logic_1;
        else 
            time_stamp_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    time_stamp_V_0_data_out_assign_proc : process(time_stamp_V_TDATA, time_stamp_V_0_data_reg, time_stamp_V_0_has_vld_data_reg)
    begin
        if ((ap_const_logic_1 = time_stamp_V_0_has_vld_data_reg)) then 
            time_stamp_V_0_data_out <= time_stamp_V_0_data_reg;
        else 
            time_stamp_V_0_data_out <= time_stamp_V_TDATA;
        end if; 
    end process;


    time_stamp_V_0_has_vld_data_reg_i_assign_proc : process(time_stamp_V_0_vld_in, time_stamp_V_0_ack_out, time_stamp_V_0_in_rdy, time_stamp_V_0_has_vld_data_reg)
    begin
        if (((ap_const_logic_1 = time_stamp_V_0_vld_in) and (ap_const_logic_0 = time_stamp_V_0_ack_out) and (ap_const_logic_1 = time_stamp_V_0_in_rdy))) then 
            time_stamp_V_0_has_vld_data_reg_i <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = time_stamp_V_0_ack_out) and (ap_const_logic_1 = time_stamp_V_0_has_vld_data_reg) and ((ap_const_logic_0 = time_stamp_V_0_vld_in) or (ap_const_logic_0 = time_stamp_V_0_in_rdy)))) then 
            time_stamp_V_0_has_vld_data_reg_i <= ap_const_logic_0;
        else 
            time_stamp_V_0_has_vld_data_reg_i <= time_stamp_V_0_has_vld_data_reg;
        end if; 
    end process;

    time_stamp_V_0_vld_in <= time_stamp_V_TVALID;
    time_stamp_V_0_vld_out <= ((time_stamp_V_TVALID or time_stamp_V_0_has_vld_data_reg) and not(time_stamp_V_0_areset_d));

    time_stamp_V_TDATA_blk_n_assign_proc : process(time_stamp_V_0_vld_out, ap_sig_cseq_ST_st11_fsm_10, empty_2_reg_313_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = empty_2_reg_313_1)))) then 
            time_stamp_V_TDATA_blk_n <= time_stamp_V_0_vld_out;
        else 
            time_stamp_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    time_stamp_V_TREADY <= time_stamp_V_0_in_rdy;
        tmp_10_cast_fu_203_p1 <= std_logic_vector(resize(signed(tmp_s_reg_304),64));

        tmp_12_cast_fu_239_p1 <= std_logic_vector(resize(signed(tmp_3_fu_234_p2),64));

        tmp_13_cast_fu_253_p1 <= std_logic_vector(resize(signed(tmp_4_fu_248_p2),64));

    tmp_3_fu_234_p2 <= std_logic_vector(unsigned(tmp_2_reg_331) + unsigned(tmp_6_cast_fu_230_p1));
    tmp_4_fu_248_p2 <= std_logic_vector(unsigned(tmp_2_reg_331) + unsigned(tmp_9_cast_fu_244_p1));
    tmp_6_cast_fu_230_p1 <= std_logic_vector(resize(unsigned(empty_2_reg_313_0),11));
    tmp_9_cast_fu_244_p1 <= std_logic_vector(resize(unsigned(j1_phi_fu_180_p4),11));
end behav;
