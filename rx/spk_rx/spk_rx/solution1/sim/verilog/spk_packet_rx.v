// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="spk_packet_rx,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.350000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=2,HLS_SYN_FF=689,HLS_SYN_LUT=436}" *)

module spk_packet_rx (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pre_in_TUSER,
        pre_in_TVALID,
        pre_in_TREADY,
        pre_in_TLAST,
        pre_in_TID,
        pre_in_TDATA,
        post_in_TUSER,
        post_in_TVALID,
        post_in_TREADY,
        post_in_TLAST,
        post_in_TID,
        post_in_TDATA,
        time_stamp_V_TDATA,
        time_stamp_V_TVALID,
        time_stamp_V_TREADY,
        spk_out_stream_TID,
        spk_out_stream_TVALID,
        spk_out_stream_TREADY,
        spk_out_stream_TUSER,
        spk_out_stream_TDATA,
        spk_out_stream_TDEST
);

parameter    ap_ST_st1_fsm_0 = 13'b1;
parameter    ap_ST_st2_fsm_1 = 13'b10;
parameter    ap_ST_st3_fsm_2 = 13'b100;
parameter    ap_ST_st4_fsm_3 = 13'b1000;
parameter    ap_ST_st5_fsm_4 = 13'b10000;
parameter    ap_ST_st6_fsm_5 = 13'b100000;
parameter    ap_ST_st7_fsm_6 = 13'b1000000;
parameter    ap_ST_st8_fsm_7 = 13'b10000000;
parameter    ap_ST_st9_fsm_8 = 13'b100000000;
parameter    ap_ST_st10_fsm_9 = 13'b1000000000;
parameter    ap_ST_st11_fsm_10 = 13'b10000000000;
parameter    ap_ST_pp0_stg0_fsm_11 = 13'b100000000000;
parameter    ap_ST_st14_fsm_12 = 13'b1000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv11_13 = 11'b10011;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_12 = 5'b10010;
parameter    ap_const_lv32_C = 32'b1100;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] pre_in_TUSER;
input   pre_in_TVALID;
output   pre_in_TREADY;
input   pre_in_TLAST;
input  [5:0] pre_in_TID;
input  [95:0] pre_in_TDATA;
input  [4:0] post_in_TUSER;
input   post_in_TVALID;
output   post_in_TREADY;
input   post_in_TLAST;
input  [5:0] post_in_TID;
input  [95:0] post_in_TDATA;
input  [31:0] time_stamp_V_TDATA;
input   time_stamp_V_TVALID;
output   time_stamp_V_TREADY;
output  [5:0] spk_out_stream_TID;
output   spk_out_stream_TVALID;
input   spk_out_stream_TREADY;
output  [31:0] spk_out_stream_TUSER;
output  [95:0] spk_out_stream_TDATA;
output  [15:0] spk_out_stream_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg spk_out_stream_TVALID;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_30;
reg   [4:0] pre_in_V_user_V_0_data_out;
wire    pre_in_V_user_V_0_vld_in;
wire    pre_in_V_user_V_0_vld_out;
reg    pre_in_V_user_V_0_ack_out;
reg   [4:0] pre_in_V_user_V_0_data_reg;
reg    pre_in_V_user_V_0_areset_d;
reg    pre_in_V_user_V_0_in_rdy;
reg    pre_in_V_user_V_0_has_vld_data_reg_i;
reg    pre_in_V_user_V_0_has_vld_data_reg;
wire    pre_in_V_last_0_vld_in;
wire    pre_in_V_last_0_vld_out;
reg    pre_in_V_last_0_ack_out;
reg    pre_in_V_last_0_areset_d;
reg    pre_in_V_last_0_in_rdy;
reg    pre_in_V_last_0_has_vld_data_reg_i;
reg    pre_in_V_last_0_has_vld_data_reg;
reg   [5:0] pre_in_V_id_V_0_data_out;
wire    pre_in_V_id_V_0_vld_in;
wire    pre_in_V_id_V_0_vld_out;
reg    pre_in_V_id_V_0_ack_out;
reg   [5:0] pre_in_V_id_V_0_data_reg;
reg    pre_in_V_id_V_0_areset_d;
reg    pre_in_V_id_V_0_in_rdy;
reg    pre_in_V_id_V_0_has_vld_data_reg_i;
reg    pre_in_V_id_V_0_has_vld_data_reg;
reg   [95:0] pre_in_V_data_V_0_data_out;
wire    pre_in_V_data_V_0_vld_in;
wire    pre_in_V_data_V_0_vld_out;
reg    pre_in_V_data_V_0_ack_out;
reg   [95:0] pre_in_V_data_V_0_data_reg;
reg    pre_in_V_data_V_0_areset_d;
reg    pre_in_V_data_V_0_in_rdy;
reg    pre_in_V_data_V_0_has_vld_data_reg_i;
reg    pre_in_V_data_V_0_has_vld_data_reg;
reg   [4:0] post_in_V_user_V_0_data_out;
wire    post_in_V_user_V_0_vld_in;
wire    post_in_V_user_V_0_vld_out;
reg    post_in_V_user_V_0_ack_out;
reg   [4:0] post_in_V_user_V_0_data_reg;
reg    post_in_V_user_V_0_areset_d;
reg    post_in_V_user_V_0_in_rdy;
reg    post_in_V_user_V_0_has_vld_data_reg_i;
reg    post_in_V_user_V_0_has_vld_data_reg;
reg    post_in_V_last_0_data_out;
wire    post_in_V_last_0_vld_in;
wire    post_in_V_last_0_vld_out;
reg    post_in_V_last_0_ack_out;
reg    post_in_V_last_0_data_reg;
reg    post_in_V_last_0_areset_d;
reg    post_in_V_last_0_in_rdy;
reg    post_in_V_last_0_has_vld_data_reg_i;
reg    post_in_V_last_0_has_vld_data_reg;
reg   [5:0] post_in_V_id_V_0_data_out;
wire    post_in_V_id_V_0_vld_in;
wire    post_in_V_id_V_0_vld_out;
reg    post_in_V_id_V_0_ack_out;
reg   [5:0] post_in_V_id_V_0_data_reg;
reg    post_in_V_id_V_0_areset_d;
reg    post_in_V_id_V_0_in_rdy;
reg    post_in_V_id_V_0_has_vld_data_reg_i;
reg    post_in_V_id_V_0_has_vld_data_reg;
reg   [95:0] post_in_V_data_V_0_data_out;
wire    post_in_V_data_V_0_vld_in;
wire    post_in_V_data_V_0_vld_out;
reg    post_in_V_data_V_0_ack_out;
reg   [95:0] post_in_V_data_V_0_data_reg;
reg    post_in_V_data_V_0_areset_d;
reg    post_in_V_data_V_0_in_rdy;
reg    post_in_V_data_V_0_has_vld_data_reg_i;
reg    post_in_V_data_V_0_has_vld_data_reg;
reg   [31:0] time_stamp_V_0_data_out;
wire    time_stamp_V_0_vld_in;
wire    time_stamp_V_0_vld_out;
reg    time_stamp_V_0_ack_out;
reg   [31:0] time_stamp_V_0_data_reg;
reg    time_stamp_V_0_areset_d;
reg    time_stamp_V_0_in_rdy;
reg    time_stamp_V_0_has_vld_data_reg_i;
reg    time_stamp_V_0_has_vld_data_reg;
reg   [9:0] spk_V_address0;
reg    spk_V_ce0;
reg    spk_V_we0;
reg   [95:0] spk_V_d0;
wire   [95:0] spk_V_q0;
reg    pre_in_TDATA_blk_n;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_353;
wire   [0:0] grp_nbreadreq_fu_78_p6;
reg    post_in_TDATA_blk_n;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_366;
wire   [0:0] grp_nbreadreq_fu_104_p6;
reg    time_stamp_V_TDATA_blk_n;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_378;
reg    spk_out_stream_TDATA_blk_n;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_11;
reg    ap_sig_390;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it0;
reg   [4:0] i_op_assign1_reg_181;
reg   [0:0] tmp_reg_287;
reg    ap_sig_402;
reg   [4:0] empty_reg_291_0;
reg   [5:0] empty_reg_291_2;
reg   [95:0] empty_reg_291_3;
reg   [4:0] tmp_user_V_reg_298;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_423;
reg   [95:0] tmp_data_V_reg_303;
wire   [10:0] grp_fu_279_p3;
reg   [10:0] tmp_s_reg_313;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_436;
reg    ap_sig_441;
reg   [4:0] empty_2_reg_322_0;
reg   [0:0] empty_2_reg_322_1;
reg   [5:0] empty_2_reg_322_2;
reg   [95:0] empty_2_reg_322_3;
reg   [5:0] tmp_id_V_reg_330;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_462;
wire   [10:0] grp_fu_219_p2;
reg   [10:0] tmp_2_reg_340;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_473;
reg    ap_sig_478;
reg   [31:0] tmp_5_reg_350;
wire   [10:0] tmp_dest_V_fu_253_p2;
reg   [10:0] tmp_dest_V_reg_355;
reg    ap_sig_ioackin_spk_out_stream_TREADY;
wire   [4:0] j_fu_263_p2;
reg   [4:0] j_reg_365;
wire   [0:0] exitcond_fu_269_p2;
reg   [0:0] exitcond_reg_370;
reg   [4:0] i_op_assign1_phi_fu_185_p4;
wire  signed [63:0] tmp_10_cast_fu_208_p1;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_515;
wire  signed [63:0] tmp_12_cast_fu_244_p1;
wire  signed [63:0] tmp_13_cast_fu_258_p1;
reg    ap_reg_ioackin_spk_out_stream_TREADY;
wire   [5:0] grp_fu_219_p0;
wire   [5:0] grp_fu_219_p1;
wire   [10:0] tmp_6_cast_fu_235_p1;
wire   [10:0] tmp_3_fu_239_p2;
wire   [10:0] tmp_5_cast_fu_249_p1;
wire   [5:0] grp_fu_279_p0;
wire   [5:0] grp_fu_279_p1;
wire   [4:0] grp_fu_279_p2;
reg    ap_sig_cseq_ST_st14_fsm_12;
reg    ap_sig_629;
reg   [12:0] ap_NS_fsm;
wire   [10:0] grp_fu_219_p00;
wire   [10:0] grp_fu_279_p00;
wire   [10:0] grp_fu_279_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'b1;
#0 pre_in_V_user_V_0_in_rdy = 1'b0;
#0 pre_in_V_user_V_0_has_vld_data_reg = 1'b0;
#0 pre_in_V_last_0_in_rdy = 1'b0;
#0 pre_in_V_last_0_has_vld_data_reg = 1'b0;
#0 pre_in_V_id_V_0_in_rdy = 1'b0;
#0 pre_in_V_id_V_0_has_vld_data_reg = 1'b0;
#0 pre_in_V_data_V_0_in_rdy = 1'b0;
#0 pre_in_V_data_V_0_has_vld_data_reg = 1'b0;
#0 post_in_V_user_V_0_in_rdy = 1'b0;
#0 post_in_V_user_V_0_has_vld_data_reg = 1'b0;
#0 post_in_V_last_0_in_rdy = 1'b0;
#0 post_in_V_last_0_has_vld_data_reg = 1'b0;
#0 post_in_V_id_V_0_in_rdy = 1'b0;
#0 post_in_V_id_V_0_has_vld_data_reg = 1'b0;
#0 post_in_V_data_V_0_in_rdy = 1'b0;
#0 post_in_V_data_V_0_has_vld_data_reg = 1'b0;
#0 time_stamp_V_0_in_rdy = 1'b0;
#0 time_stamp_V_0_has_vld_data_reg = 1'b0;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ioackin_spk_out_stream_TREADY = 1'b0;
end

spk_packet_rx_spk_V #(
    .DataWidth( 96 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
spk_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(spk_V_address0),
    .ce0(spk_V_ce0),
    .we0(spk_V_we0),
    .d0(spk_V_d0),
    .q0(spk_V_q0)
);

spk_packet_rx_mul_6ns_6ns_11_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
spk_packet_rx_mul_6ns_6ns_11_3_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_219_p0),
    .din1(grp_fu_219_p1),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

spk_packet_rx_mac_muladd_6ns_6ns_5ns_11_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
spk_packet_rx_mac_muladd_6ns_6ns_5ns_11_3_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_279_p0),
    .din1(grp_fu_279_p1),
    .din2(grp_fu_279_p2),
    .ce(1'b1),
    .dout(grp_fu_279_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_spk_out_stream_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it1) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_spk_out_stream_TREADY)))) begin
            ap_reg_ioackin_spk_out_stream_TREADY <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b1 == spk_out_stream_TREADY))) begin
            ap_reg_ioackin_spk_out_stream_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_spk_out_stream_TREADY)) & ~(1'b0 == exitcond_fu_269_p2))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~(1'b0 == empty_2_reg_322_1) & ~ap_sig_478)) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_spk_out_stream_TREADY)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end else if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~(1'b0 == empty_2_reg_322_1) & ~ap_sig_478)) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        post_in_V_data_V_0_has_vld_data_reg <= 1'b0;
    end else begin
        post_in_V_data_V_0_has_vld_data_reg <= post_in_V_data_V_0_has_vld_data_reg_i;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        post_in_V_data_V_0_in_rdy <= 1'b0;
    end else begin
        post_in_V_data_V_0_in_rdy <= (post_in_V_data_V_0_ack_out | ~post_in_V_data_V_0_has_vld_data_reg_i);
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        post_in_V_id_V_0_has_vld_data_reg <= 1'b0;
    end else begin
        post_in_V_id_V_0_has_vld_data_reg <= post_in_V_id_V_0_has_vld_data_reg_i;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        post_in_V_id_V_0_in_rdy <= 1'b0;
    end else begin
        post_in_V_id_V_0_in_rdy <= (post_in_V_id_V_0_ack_out | ~post_in_V_id_V_0_has_vld_data_reg_i);
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        post_in_V_last_0_has_vld_data_reg <= 1'b0;
    end else begin
        post_in_V_last_0_has_vld_data_reg <= post_in_V_last_0_has_vld_data_reg_i;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        post_in_V_last_0_in_rdy <= 1'b0;
    end else begin
        post_in_V_last_0_in_rdy <= (post_in_V_last_0_ack_out | ~post_in_V_last_0_has_vld_data_reg_i);
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        post_in_V_user_V_0_has_vld_data_reg <= 1'b0;
    end else begin
        post_in_V_user_V_0_has_vld_data_reg <= post_in_V_user_V_0_has_vld_data_reg_i;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        post_in_V_user_V_0_in_rdy <= 1'b0;
    end else begin
        post_in_V_user_V_0_in_rdy <= (post_in_V_user_V_0_ack_out | ~post_in_V_user_V_0_has_vld_data_reg_i);
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pre_in_V_data_V_0_has_vld_data_reg <= 1'b0;
    end else begin
        pre_in_V_data_V_0_has_vld_data_reg <= pre_in_V_data_V_0_has_vld_data_reg_i;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pre_in_V_data_V_0_in_rdy <= 1'b0;
    end else begin
        pre_in_V_data_V_0_in_rdy <= (pre_in_V_data_V_0_ack_out | ~pre_in_V_data_V_0_has_vld_data_reg_i);
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pre_in_V_id_V_0_has_vld_data_reg <= 1'b0;
    end else begin
        pre_in_V_id_V_0_has_vld_data_reg <= pre_in_V_id_V_0_has_vld_data_reg_i;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pre_in_V_id_V_0_in_rdy <= 1'b0;
    end else begin
        pre_in_V_id_V_0_in_rdy <= (pre_in_V_id_V_0_ack_out | ~pre_in_V_id_V_0_has_vld_data_reg_i);
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pre_in_V_last_0_has_vld_data_reg <= 1'b0;
    end else begin
        pre_in_V_last_0_has_vld_data_reg <= pre_in_V_last_0_has_vld_data_reg_i;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pre_in_V_last_0_in_rdy <= 1'b0;
    end else begin
        pre_in_V_last_0_in_rdy <= (pre_in_V_last_0_ack_out | ~pre_in_V_last_0_has_vld_data_reg_i);
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pre_in_V_user_V_0_has_vld_data_reg <= 1'b0;
    end else begin
        pre_in_V_user_V_0_has_vld_data_reg <= pre_in_V_user_V_0_has_vld_data_reg_i;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pre_in_V_user_V_0_in_rdy <= 1'b0;
    end else begin
        pre_in_V_user_V_0_in_rdy <= (pre_in_V_user_V_0_ack_out | ~pre_in_V_user_V_0_has_vld_data_reg_i);
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        time_stamp_V_0_has_vld_data_reg <= 1'b0;
    end else begin
        time_stamp_V_0_has_vld_data_reg <= time_stamp_V_0_has_vld_data_reg_i;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        time_stamp_V_0_in_rdy <= 1'b0;
    end else begin
        time_stamp_V_0_in_rdy <= (time_stamp_V_0_ack_out | ~time_stamp_V_0_has_vld_data_reg_i);
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it1) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_spk_out_stream_TREADY)) & (1'b0 == exitcond_reg_370))) begin
        i_op_assign1_reg_181 <= j_reg_365;
    end else if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~(1'b0 == empty_2_reg_322_1) & ~ap_sig_478)) begin
        i_op_assign1_reg_181 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == grp_nbreadreq_fu_104_p6) & ~ap_sig_441)) begin
        empty_2_reg_322_0 <= post_in_V_user_V_0_data_out;
        empty_2_reg_322_1 <= post_in_V_last_0_data_out;
        empty_2_reg_322_2 <= post_in_V_id_V_0_data_out;
        empty_2_reg_322_3 <= post_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(grp_nbreadreq_fu_78_p6 == 1'b0) & ~ap_sig_402)) begin
        empty_reg_291_0 <= pre_in_V_user_V_0_data_out;
        empty_reg_291_2 <= pre_in_V_id_V_0_data_out;
        empty_reg_291_3 <= pre_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_spk_out_stream_TREADY)))) begin
        exitcond_reg_370 <= exitcond_fu_269_p2;
        tmp_dest_V_reg_355 <= tmp_dest_V_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_spk_out_stream_TREADY)))) begin
        j_reg_365 <= j_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        post_in_V_data_V_0_areset_d <= ap_rst_n_inv;
        post_in_V_id_V_0_areset_d <= ap_rst_n_inv;
        post_in_V_last_0_areset_d <= ap_rst_n_inv;
        post_in_V_user_V_0_areset_d <= ap_rst_n_inv;
        pre_in_V_data_V_0_areset_d <= ap_rst_n_inv;
        pre_in_V_id_V_0_areset_d <= ap_rst_n_inv;
        pre_in_V_last_0_areset_d <= ap_rst_n_inv;
        pre_in_V_user_V_0_areset_d <= ap_rst_n_inv;
        time_stamp_V_0_areset_d <= ap_rst_n_inv;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == post_in_V_data_V_0_vld_in) & (1'b1 == post_in_V_data_V_0_in_rdy))) begin
        post_in_V_data_V_0_data_reg <= post_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == post_in_V_id_V_0_vld_in) & (1'b1 == post_in_V_id_V_0_in_rdy))) begin
        post_in_V_id_V_0_data_reg <= post_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == post_in_V_last_0_vld_in) & (1'b1 == post_in_V_last_0_in_rdy))) begin
        post_in_V_last_0_data_reg <= post_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == post_in_V_user_V_0_vld_in) & (1'b1 == post_in_V_user_V_0_in_rdy))) begin
        post_in_V_user_V_0_data_reg <= post_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == pre_in_V_data_V_0_vld_in) & (1'b1 == pre_in_V_data_V_0_in_rdy))) begin
        pre_in_V_data_V_0_data_reg <= pre_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == pre_in_V_id_V_0_vld_in) & (1'b1 == pre_in_V_id_V_0_in_rdy))) begin
        pre_in_V_id_V_0_data_reg <= pre_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == pre_in_V_user_V_0_vld_in) & (1'b1 == pre_in_V_user_V_0_in_rdy))) begin
        pre_in_V_user_V_0_data_reg <= pre_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == time_stamp_V_0_vld_in) & (1'b1 == time_stamp_V_0_in_rdy))) begin
        time_stamp_V_0_data_reg <= time_stamp_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        tmp_2_reg_340 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~(1'b0 == empty_2_reg_322_1) & ~ap_sig_478)) begin
        tmp_5_reg_350 <= time_stamp_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_data_V_reg_303 <= empty_reg_291_3;
        tmp_user_V_reg_298 <= empty_reg_291_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_id_V_reg_330 <= empty_2_reg_322_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_402)) begin
        tmp_reg_287 <= grp_nbreadreq_fu_78_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        tmp_s_reg_313 <= grp_fu_279_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st14_fsm_12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st14_fsm_12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_390) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_473) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_378) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_629) begin
        ap_sig_cseq_ST_st14_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_30) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_353) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_423) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_436) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_515) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_366) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_462) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_spk_out_stream_TREADY)) begin
        ap_sig_ioackin_spk_out_stream_TREADY = spk_out_stream_TREADY;
    end else begin
        ap_sig_ioackin_spk_out_stream_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == exitcond_reg_370))) begin
        i_op_assign1_phi_fu_185_p4 = j_reg_365;
    end else begin
        i_op_assign1_phi_fu_185_p4 = i_op_assign1_reg_181;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == grp_nbreadreq_fu_104_p6))) begin
        post_in_TDATA_blk_n = post_in_V_data_V_0_vld_out;
    end else begin
        post_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == grp_nbreadreq_fu_104_p6) & ~ap_sig_441)) begin
        post_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        post_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == post_in_V_data_V_0_has_vld_data_reg)) begin
        post_in_V_data_V_0_data_out = post_in_V_data_V_0_data_reg;
    end else begin
        post_in_V_data_V_0_data_out = post_in_TDATA;
    end
end

always @ (*) begin
    if (((1'b1 == post_in_V_data_V_0_vld_in) & (1'b0 == post_in_V_data_V_0_ack_out) & (1'b1 == post_in_V_data_V_0_in_rdy))) begin
        post_in_V_data_V_0_has_vld_data_reg_i = 1'b1;
    end else if (((1'b1 == post_in_V_data_V_0_ack_out) & (1'b1 == post_in_V_data_V_0_has_vld_data_reg) & ((1'b0 == post_in_V_data_V_0_vld_in) | (1'b0 == post_in_V_data_V_0_in_rdy)))) begin
        post_in_V_data_V_0_has_vld_data_reg_i = 1'b0;
    end else begin
        post_in_V_data_V_0_has_vld_data_reg_i = post_in_V_data_V_0_has_vld_data_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == grp_nbreadreq_fu_104_p6) & ~ap_sig_441)) begin
        post_in_V_id_V_0_ack_out = 1'b1;
    end else begin
        post_in_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == post_in_V_id_V_0_has_vld_data_reg)) begin
        post_in_V_id_V_0_data_out = post_in_V_id_V_0_data_reg;
    end else begin
        post_in_V_id_V_0_data_out = post_in_TID;
    end
end

always @ (*) begin
    if (((1'b1 == post_in_V_id_V_0_vld_in) & (1'b0 == post_in_V_id_V_0_ack_out) & (1'b1 == post_in_V_id_V_0_in_rdy))) begin
        post_in_V_id_V_0_has_vld_data_reg_i = 1'b1;
    end else if (((1'b1 == post_in_V_id_V_0_ack_out) & (1'b1 == post_in_V_id_V_0_has_vld_data_reg) & ((1'b0 == post_in_V_id_V_0_vld_in) | (1'b0 == post_in_V_id_V_0_in_rdy)))) begin
        post_in_V_id_V_0_has_vld_data_reg_i = 1'b0;
    end else begin
        post_in_V_id_V_0_has_vld_data_reg_i = post_in_V_id_V_0_has_vld_data_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == grp_nbreadreq_fu_104_p6) & ~ap_sig_441)) begin
        post_in_V_last_0_ack_out = 1'b1;
    end else begin
        post_in_V_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == post_in_V_last_0_has_vld_data_reg)) begin
        post_in_V_last_0_data_out = post_in_V_last_0_data_reg;
    end else begin
        post_in_V_last_0_data_out = post_in_TLAST;
    end
end

always @ (*) begin
    if (((1'b1 == post_in_V_last_0_vld_in) & (1'b0 == post_in_V_last_0_ack_out) & (1'b1 == post_in_V_last_0_in_rdy))) begin
        post_in_V_last_0_has_vld_data_reg_i = 1'b1;
    end else if (((1'b1 == post_in_V_last_0_ack_out) & (1'b1 == post_in_V_last_0_has_vld_data_reg) & ((1'b0 == post_in_V_last_0_vld_in) | (1'b0 == post_in_V_last_0_in_rdy)))) begin
        post_in_V_last_0_has_vld_data_reg_i = 1'b0;
    end else begin
        post_in_V_last_0_has_vld_data_reg_i = post_in_V_last_0_has_vld_data_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == grp_nbreadreq_fu_104_p6) & ~ap_sig_441)) begin
        post_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        post_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == post_in_V_user_V_0_has_vld_data_reg)) begin
        post_in_V_user_V_0_data_out = post_in_V_user_V_0_data_reg;
    end else begin
        post_in_V_user_V_0_data_out = post_in_TUSER;
    end
end

always @ (*) begin
    if (((1'b1 == post_in_V_user_V_0_vld_in) & (1'b0 == post_in_V_user_V_0_ack_out) & (1'b1 == post_in_V_user_V_0_in_rdy))) begin
        post_in_V_user_V_0_has_vld_data_reg_i = 1'b1;
    end else if (((1'b1 == post_in_V_user_V_0_ack_out) & (1'b1 == post_in_V_user_V_0_has_vld_data_reg) & ((1'b0 == post_in_V_user_V_0_vld_in) | (1'b0 == post_in_V_user_V_0_in_rdy)))) begin
        post_in_V_user_V_0_has_vld_data_reg_i = 1'b0;
    end else begin
        post_in_V_user_V_0_has_vld_data_reg_i = post_in_V_user_V_0_has_vld_data_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(grp_nbreadreq_fu_78_p6 == 1'b0))) begin
        pre_in_TDATA_blk_n = pre_in_V_data_V_0_vld_out;
    end else begin
        pre_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(grp_nbreadreq_fu_78_p6 == 1'b0) & ~ap_sig_402)) begin
        pre_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        pre_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == pre_in_V_data_V_0_has_vld_data_reg)) begin
        pre_in_V_data_V_0_data_out = pre_in_V_data_V_0_data_reg;
    end else begin
        pre_in_V_data_V_0_data_out = pre_in_TDATA;
    end
end

always @ (*) begin
    if (((1'b1 == pre_in_V_data_V_0_vld_in) & (1'b0 == pre_in_V_data_V_0_ack_out) & (1'b1 == pre_in_V_data_V_0_in_rdy))) begin
        pre_in_V_data_V_0_has_vld_data_reg_i = 1'b1;
    end else if (((1'b1 == pre_in_V_data_V_0_ack_out) & (1'b1 == pre_in_V_data_V_0_has_vld_data_reg) & ((1'b0 == pre_in_V_data_V_0_vld_in) | (1'b0 == pre_in_V_data_V_0_in_rdy)))) begin
        pre_in_V_data_V_0_has_vld_data_reg_i = 1'b0;
    end else begin
        pre_in_V_data_V_0_has_vld_data_reg_i = pre_in_V_data_V_0_has_vld_data_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(grp_nbreadreq_fu_78_p6 == 1'b0) & ~ap_sig_402)) begin
        pre_in_V_id_V_0_ack_out = 1'b1;
    end else begin
        pre_in_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == pre_in_V_id_V_0_has_vld_data_reg)) begin
        pre_in_V_id_V_0_data_out = pre_in_V_id_V_0_data_reg;
    end else begin
        pre_in_V_id_V_0_data_out = pre_in_TID;
    end
end

always @ (*) begin
    if (((1'b1 == pre_in_V_id_V_0_vld_in) & (1'b0 == pre_in_V_id_V_0_ack_out) & (1'b1 == pre_in_V_id_V_0_in_rdy))) begin
        pre_in_V_id_V_0_has_vld_data_reg_i = 1'b1;
    end else if (((1'b1 == pre_in_V_id_V_0_ack_out) & (1'b1 == pre_in_V_id_V_0_has_vld_data_reg) & ((1'b0 == pre_in_V_id_V_0_vld_in) | (1'b0 == pre_in_V_id_V_0_in_rdy)))) begin
        pre_in_V_id_V_0_has_vld_data_reg_i = 1'b0;
    end else begin
        pre_in_V_id_V_0_has_vld_data_reg_i = pre_in_V_id_V_0_has_vld_data_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(grp_nbreadreq_fu_78_p6 == 1'b0) & ~ap_sig_402)) begin
        pre_in_V_last_0_ack_out = 1'b1;
    end else begin
        pre_in_V_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == pre_in_V_last_0_vld_in) & (1'b0 == pre_in_V_last_0_ack_out) & (1'b1 == pre_in_V_last_0_in_rdy))) begin
        pre_in_V_last_0_has_vld_data_reg_i = 1'b1;
    end else if (((1'b1 == pre_in_V_last_0_ack_out) & (1'b1 == pre_in_V_last_0_has_vld_data_reg) & ((1'b0 == pre_in_V_last_0_vld_in) | (1'b0 == pre_in_V_last_0_in_rdy)))) begin
        pre_in_V_last_0_has_vld_data_reg_i = 1'b0;
    end else begin
        pre_in_V_last_0_has_vld_data_reg_i = pre_in_V_last_0_has_vld_data_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(grp_nbreadreq_fu_78_p6 == 1'b0) & ~ap_sig_402)) begin
        pre_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        pre_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == pre_in_V_user_V_0_has_vld_data_reg)) begin
        pre_in_V_user_V_0_data_out = pre_in_V_user_V_0_data_reg;
    end else begin
        pre_in_V_user_V_0_data_out = pre_in_TUSER;
    end
end

always @ (*) begin
    if (((1'b1 == pre_in_V_user_V_0_vld_in) & (1'b0 == pre_in_V_user_V_0_ack_out) & (1'b1 == pre_in_V_user_V_0_in_rdy))) begin
        pre_in_V_user_V_0_has_vld_data_reg_i = 1'b1;
    end else if (((1'b1 == pre_in_V_user_V_0_ack_out) & (1'b1 == pre_in_V_user_V_0_has_vld_data_reg) & ((1'b0 == pre_in_V_user_V_0_vld_in) | (1'b0 == pre_in_V_user_V_0_in_rdy)))) begin
        pre_in_V_user_V_0_has_vld_data_reg_i = 1'b0;
    end else begin
        pre_in_V_user_V_0_has_vld_data_reg_i = pre_in_V_user_V_0_has_vld_data_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        spk_V_address0 = tmp_12_cast_fu_244_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        spk_V_address0 = tmp_10_cast_fu_208_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        spk_V_address0 = tmp_13_cast_fu_258_p1;
    end else begin
        spk_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~ap_sig_478) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_spk_out_stream_TREADY))) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5))) begin
        spk_V_ce0 = 1'b1;
    end else begin
        spk_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        spk_V_d0 = empty_2_reg_322_3;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        spk_V_d0 = tmp_data_V_reg_303;
    end else begin
        spk_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~ap_sig_478) | ((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == tmp_reg_287)))) begin
        spk_V_we0 = 1'b1;
    end else begin
        spk_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        spk_out_stream_TDATA_blk_n = spk_out_stream_TREADY;
    end else begin
        spk_out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_reg_ioackin_spk_out_stream_TREADY))) begin
        spk_out_stream_TVALID = 1'b1;
    end else begin
        spk_out_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~(1'b0 == empty_2_reg_322_1) & ~ap_sig_478)) begin
        time_stamp_V_0_ack_out = 1'b1;
    end else begin
        time_stamp_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == time_stamp_V_0_has_vld_data_reg)) begin
        time_stamp_V_0_data_out = time_stamp_V_0_data_reg;
    end else begin
        time_stamp_V_0_data_out = time_stamp_V_TDATA;
    end
end

always @ (*) begin
    if (((1'b1 == time_stamp_V_0_vld_in) & (1'b0 == time_stamp_V_0_ack_out) & (1'b1 == time_stamp_V_0_in_rdy))) begin
        time_stamp_V_0_has_vld_data_reg_i = 1'b1;
    end else if (((1'b1 == time_stamp_V_0_ack_out) & (1'b1 == time_stamp_V_0_has_vld_data_reg) & ((1'b0 == time_stamp_V_0_vld_in) | (1'b0 == time_stamp_V_0_in_rdy)))) begin
        time_stamp_V_0_has_vld_data_reg_i = 1'b0;
    end else begin
        time_stamp_V_0_has_vld_data_reg_i = time_stamp_V_0_has_vld_data_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~(1'b0 == empty_2_reg_322_1))) begin
        time_stamp_V_TDATA_blk_n = time_stamp_V_0_vld_out;
    end else begin
        time_stamp_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (((grp_nbreadreq_fu_78_p6 == 1'b0) & ~ap_sig_402)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else if ((~(grp_nbreadreq_fu_78_p6 == 1'b0) & ~ap_sig_402)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            if (((1'b0 == grp_nbreadreq_fu_104_p6) & ~ap_sig_441)) begin
                ap_NS_fsm = ap_ST_st14_fsm_12;
            end else if ((~(1'b0 == grp_nbreadreq_fu_104_p6) & ~ap_sig_441)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            if ((~(1'b0 == empty_2_reg_322_1) & ~ap_sig_478)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_11;
            end else if (((1'b0 == empty_2_reg_322_1) & ~ap_sig_478)) begin
                ap_NS_fsm = ap_ST_st14_fsm_12;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_pp0_stg0_fsm_11 : begin
            if (~((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it1) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_spk_out_stream_TREADY)) & ~(1'b1 == ap_reg_ppiten_pp0_it0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_11;
            end else if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp0_it1) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == ap_sig_ioackin_spk_out_stream_TREADY)) & ~(1'b1 == ap_reg_ppiten_pp0_it0))) begin
                ap_NS_fsm = ap_ST_st14_fsm_12;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_11;
            end
        end
        ap_ST_st14_fsm_12 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_30 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_353 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_366 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_378 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_390 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

always @ (*) begin
    ap_sig_402 = (~(grp_nbreadreq_fu_78_p6 == 1'b0) & (pre_in_V_user_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_sig_423 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_436 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_441 = (~(1'b0 == grp_nbreadreq_fu_104_p6) & (post_in_V_user_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_sig_462 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_473 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_478 = (~(1'b0 == empty_2_reg_322_1) & (time_stamp_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_sig_515 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_629 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

assign exitcond_fu_269_p2 = ((i_op_assign1_phi_fu_185_p4 == ap_const_lv5_12) ? 1'b1 : 1'b0);

assign grp_fu_219_p0 = grp_fu_219_p00;

assign grp_fu_219_p00 = empty_2_reg_322_2;

assign grp_fu_219_p1 = ap_const_lv11_13;

assign grp_fu_279_p0 = grp_fu_279_p00;

assign grp_fu_279_p00 = empty_reg_291_2;

assign grp_fu_279_p1 = ap_const_lv11_13;

assign grp_fu_279_p2 = grp_fu_279_p20;

assign grp_fu_279_p20 = tmp_user_V_reg_298;

assign grp_nbreadreq_fu_104_p6 = (post_in_V_user_V_0_vld_out & post_in_V_last_0_vld_out & post_in_V_id_V_0_vld_out & post_in_V_data_V_0_vld_out);

assign grp_nbreadreq_fu_78_p6 = (pre_in_V_user_V_0_vld_out & pre_in_V_last_0_vld_out & pre_in_V_id_V_0_vld_out & pre_in_V_data_V_0_vld_out);

assign j_fu_263_p2 = (i_op_assign1_phi_fu_185_p4 + ap_const_lv5_1);

assign post_in_TREADY = post_in_V_data_V_0_in_rdy;

assign post_in_V_data_V_0_vld_in = post_in_TVALID;

assign post_in_V_data_V_0_vld_out = ((post_in_TVALID | post_in_V_data_V_0_has_vld_data_reg) & ~post_in_V_data_V_0_areset_d);

assign post_in_V_id_V_0_vld_in = post_in_TVALID;

assign post_in_V_id_V_0_vld_out = ((post_in_TVALID | post_in_V_id_V_0_has_vld_data_reg) & ~post_in_V_id_V_0_areset_d);

assign post_in_V_last_0_vld_in = post_in_TVALID;

assign post_in_V_last_0_vld_out = ((post_in_TVALID | post_in_V_last_0_has_vld_data_reg) & ~post_in_V_last_0_areset_d);

assign post_in_V_user_V_0_vld_in = post_in_TVALID;

assign post_in_V_user_V_0_vld_out = ((post_in_TVALID | post_in_V_user_V_0_has_vld_data_reg) & ~post_in_V_user_V_0_areset_d);

assign pre_in_TREADY = pre_in_V_data_V_0_in_rdy;

assign pre_in_V_data_V_0_vld_in = pre_in_TVALID;

assign pre_in_V_data_V_0_vld_out = ((pre_in_TVALID | pre_in_V_data_V_0_has_vld_data_reg) & ~pre_in_V_data_V_0_areset_d);

assign pre_in_V_id_V_0_vld_in = pre_in_TVALID;

assign pre_in_V_id_V_0_vld_out = ((pre_in_TVALID | pre_in_V_id_V_0_has_vld_data_reg) & ~pre_in_V_id_V_0_areset_d);

assign pre_in_V_last_0_vld_in = pre_in_TVALID;

assign pre_in_V_last_0_vld_out = ((pre_in_TVALID | pre_in_V_last_0_has_vld_data_reg) & ~pre_in_V_last_0_areset_d);

assign pre_in_V_user_V_0_vld_in = pre_in_TVALID;

assign pre_in_V_user_V_0_vld_out = ((pre_in_TVALID | pre_in_V_user_V_0_has_vld_data_reg) & ~pre_in_V_user_V_0_areset_d);

assign spk_out_stream_TDATA = spk_V_q0;

assign spk_out_stream_TDEST = tmp_dest_V_reg_355;

assign spk_out_stream_TID = tmp_id_V_reg_330;

assign spk_out_stream_TUSER = tmp_5_reg_350;

assign time_stamp_V_0_vld_in = time_stamp_V_TVALID;

assign time_stamp_V_0_vld_out = ((time_stamp_V_TVALID | time_stamp_V_0_has_vld_data_reg) & ~time_stamp_V_0_areset_d);

assign time_stamp_V_TREADY = time_stamp_V_0_in_rdy;

assign tmp_10_cast_fu_208_p1 = $signed(tmp_s_reg_313);

assign tmp_12_cast_fu_244_p1 = $signed(tmp_3_fu_239_p2);

assign tmp_13_cast_fu_258_p1 = $signed(tmp_dest_V_fu_253_p2);

assign tmp_3_fu_239_p2 = (tmp_2_reg_340 + tmp_6_cast_fu_235_p1);

assign tmp_5_cast_fu_249_p1 = i_op_assign1_phi_fu_185_p4;

assign tmp_6_cast_fu_235_p1 = empty_2_reg_322_0;

assign tmp_dest_V_fu_253_p2 = (tmp_5_cast_fu_249_p1 + tmp_2_reg_340);

endmodule //spk_packet_rx
