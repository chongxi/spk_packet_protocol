// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
    typedef struct spk_struct {
        ap_uint<5> user;
        bool last;
        ap_uint<6> id;
        ap_fixed<32, 18, (ap_q_mode) 5, (ap_o_mode)3, 0> data;
       } spk_struct;

          typedef struct spk_stream {
              ap_uint<6> id;
              int user;
              ap_fixed<32, 18, (ap_q_mode) 5, (ap_o_mode)3, 0> data;
             } spk_stream;



// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "pre_in_V_user_V"
#define AUTOTB_TVIN_pre_in_V_user_V  "../tv/cdatafile/c.spk_packet_rx.autotvin_pre_in_V_user_V.dat"
#define WRAPC_STREAM_SIZE_IN_pre_in_V_user_V  "../tv/stream_size/stream_size_in_pre_in_V_user_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_pre_in_V_user_V  "../tv/stream_size/stream_ingress_status_pre_in_V_user_V.dat"
// wrapc file define: "pre_in_V_last"
#define AUTOTB_TVIN_pre_in_V_last  "../tv/cdatafile/c.spk_packet_rx.autotvin_pre_in_V_last.dat"
#define WRAPC_STREAM_SIZE_IN_pre_in_V_last  "../tv/stream_size/stream_size_in_pre_in_V_last.dat"
#define WRAPC_STREAM_INGRESS_STATUS_pre_in_V_last  "../tv/stream_size/stream_ingress_status_pre_in_V_last.dat"
// wrapc file define: "pre_in_V_id_V"
#define AUTOTB_TVIN_pre_in_V_id_V  "../tv/cdatafile/c.spk_packet_rx.autotvin_pre_in_V_id_V.dat"
#define WRAPC_STREAM_SIZE_IN_pre_in_V_id_V  "../tv/stream_size/stream_size_in_pre_in_V_id_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_pre_in_V_id_V  "../tv/stream_size/stream_ingress_status_pre_in_V_id_V.dat"
// wrapc file define: "pre_in_V_data_V"
#define AUTOTB_TVIN_pre_in_V_data_V  "../tv/cdatafile/c.spk_packet_rx.autotvin_pre_in_V_data_V.dat"
#define WRAPC_STREAM_SIZE_IN_pre_in_V_data_V  "../tv/stream_size/stream_size_in_pre_in_V_data_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_pre_in_V_data_V  "../tv/stream_size/stream_ingress_status_pre_in_V_data_V.dat"
// wrapc file define: "post_in_V_user_V"
#define AUTOTB_TVIN_post_in_V_user_V  "../tv/cdatafile/c.spk_packet_rx.autotvin_post_in_V_user_V.dat"
#define WRAPC_STREAM_SIZE_IN_post_in_V_user_V  "../tv/stream_size/stream_size_in_post_in_V_user_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_post_in_V_user_V  "../tv/stream_size/stream_ingress_status_post_in_V_user_V.dat"
// wrapc file define: "post_in_V_last"
#define AUTOTB_TVIN_post_in_V_last  "../tv/cdatafile/c.spk_packet_rx.autotvin_post_in_V_last.dat"
#define WRAPC_STREAM_SIZE_IN_post_in_V_last  "../tv/stream_size/stream_size_in_post_in_V_last.dat"
#define WRAPC_STREAM_INGRESS_STATUS_post_in_V_last  "../tv/stream_size/stream_ingress_status_post_in_V_last.dat"
// wrapc file define: "post_in_V_id_V"
#define AUTOTB_TVIN_post_in_V_id_V  "../tv/cdatafile/c.spk_packet_rx.autotvin_post_in_V_id_V.dat"
#define WRAPC_STREAM_SIZE_IN_post_in_V_id_V  "../tv/stream_size/stream_size_in_post_in_V_id_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_post_in_V_id_V  "../tv/stream_size/stream_ingress_status_post_in_V_id_V.dat"
// wrapc file define: "post_in_V_data_V"
#define AUTOTB_TVIN_post_in_V_data_V  "../tv/cdatafile/c.spk_packet_rx.autotvin_post_in_V_data_V.dat"
#define WRAPC_STREAM_SIZE_IN_post_in_V_data_V  "../tv/stream_size/stream_size_in_post_in_V_data_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_post_in_V_data_V  "../tv/stream_size/stream_ingress_status_post_in_V_data_V.dat"
// wrapc file define: "time_stamp_V"
#define AUTOTB_TVIN_time_stamp_V  "../tv/cdatafile/c.spk_packet_rx.autotvin_time_stamp_V.dat"
#define WRAPC_STREAM_SIZE_IN_time_stamp_V  "../tv/stream_size/stream_size_in_time_stamp_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_time_stamp_V  "../tv/stream_size/stream_ingress_status_time_stamp_V.dat"
// wrapc file define: "spk_out_stream_V_id_V"
#define AUTOTB_TVOUT_spk_out_stream_V_id_V  "../tv/cdatafile/c.spk_packet_rx.autotvout_spk_out_stream_V_id_V.dat"
#define AUTOTB_TVIN_spk_out_stream_V_id_V  "../tv/cdatafile/c.spk_packet_rx.autotvin_spk_out_stream_V_id_V.dat"
#define WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_id_V  "../tv/stream_size/stream_size_out_spk_out_stream_V_id_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_spk_out_stream_V_id_V  "../tv/stream_size/stream_egress_status_spk_out_stream_V_id_V.dat"
// wrapc file define: "spk_out_stream_V_user"
#define AUTOTB_TVOUT_spk_out_stream_V_user  "../tv/cdatafile/c.spk_packet_rx.autotvout_spk_out_stream_V_user.dat"
#define AUTOTB_TVIN_spk_out_stream_V_user  "../tv/cdatafile/c.spk_packet_rx.autotvin_spk_out_stream_V_user.dat"
#define WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_user  "../tv/stream_size/stream_size_out_spk_out_stream_V_user.dat"
#define WRAPC_STREAM_EGRESS_STATUS_spk_out_stream_V_user  "../tv/stream_size/stream_egress_status_spk_out_stream_V_user.dat"
// wrapc file define: "spk_out_stream_V_data_V"
#define AUTOTB_TVOUT_spk_out_stream_V_data_V  "../tv/cdatafile/c.spk_packet_rx.autotvout_spk_out_stream_V_data_V.dat"
#define AUTOTB_TVIN_spk_out_stream_V_data_V  "../tv/cdatafile/c.spk_packet_rx.autotvin_spk_out_stream_V_data_V.dat"
#define WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_data_V  "../tv/stream_size/stream_size_out_spk_out_stream_V_data_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_spk_out_stream_V_data_V  "../tv/stream_size/stream_egress_status_spk_out_stream_V_data_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "spk_out_stream_V_id_V"
#define AUTOTB_TVOUT_PC_spk_out_stream_V_id_V  "../tv/rtldatafile/rtl.spk_packet_rx.autotvout_spk_out_stream_V_id_V.dat"
// tvout file define: "spk_out_stream_V_user"
#define AUTOTB_TVOUT_PC_spk_out_stream_V_user  "../tv/rtldatafile/rtl.spk_packet_rx.autotvout_spk_out_stream_V_user.dat"
// tvout file define: "spk_out_stream_V_data_V"
#define AUTOTB_TVOUT_PC_spk_out_stream_V_data_V  "../tv/rtldatafile/rtl.spk_packet_rx.autotvout_spk_out_stream_V_data_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			pre_in_V_user_V_depth = 0;
			pre_in_V_last_depth = 0;
			pre_in_V_id_V_depth = 0;
			pre_in_V_data_V_depth = 0;
			post_in_V_user_V_depth = 0;
			post_in_V_last_depth = 0;
			post_in_V_id_V_depth = 0;
			post_in_V_data_V_depth = 0;
			time_stamp_V_depth = 0;
			spk_out_stream_V_id_V_depth = 0;
			spk_out_stream_V_user_depth = 0;
			spk_out_stream_V_data_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{pre_in_V_user_V " << pre_in_V_user_V_depth << "}\n";
			total_list << "{pre_in_V_last " << pre_in_V_last_depth << "}\n";
			total_list << "{pre_in_V_id_V " << pre_in_V_id_V_depth << "}\n";
			total_list << "{pre_in_V_data_V " << pre_in_V_data_V_depth << "}\n";
			total_list << "{post_in_V_user_V " << post_in_V_user_V_depth << "}\n";
			total_list << "{post_in_V_last " << post_in_V_last_depth << "}\n";
			total_list << "{post_in_V_id_V " << post_in_V_id_V_depth << "}\n";
			total_list << "{post_in_V_data_V " << post_in_V_data_V_depth << "}\n";
			total_list << "{time_stamp_V " << time_stamp_V_depth << "}\n";
			total_list << "{spk_out_stream_V_id_V " << spk_out_stream_V_id_V_depth << "}\n";
			total_list << "{spk_out_stream_V_user " << spk_out_stream_V_user_depth << "}\n";
			total_list << "{spk_out_stream_V_data_V " << spk_out_stream_V_data_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int pre_in_V_user_V_depth;
		int pre_in_V_last_depth;
		int pre_in_V_id_V_depth;
		int pre_in_V_data_V_depth;
		int post_in_V_user_V_depth;
		int post_in_V_last_depth;
		int post_in_V_id_V_depth;
		int post_in_V_data_V_depth;
		int time_stamp_V_depth;
		int spk_out_stream_V_id_V_depth;
		int spk_out_stream_V_user_depth;
		int spk_out_stream_V_data_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define spk_packet_rx AESL_ORIG_DUT_spk_packet_rx
extern void spk_packet_rx (
hls::stream<spk_struct >& pre_in,
hls::stream<spk_struct >& post_in,
hls::stream<int >& time_stamp,
hls::stream<spk_stream >& spk_out_stream);
#undef spk_packet_rx

void spk_packet_rx (
hls::stream<spk_struct >& pre_in,
hls::stream<spk_struct >& post_in,
hls::stream<int >& time_stamp,
hls::stream<spk_stream >& spk_out_stream)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;

		// pop stream input: "pre_in"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_pre_in_V_user_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_pre_in_V_user_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_pre_in_V_user_V, AESL_token); // pop_size
			int aesl_tmp_1 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_1; i++)
			{
				pre_in.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_pre_in_V_user_V, AESL_token); // [[/transaction]]
		}

		// pop stream input: "post_in"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_post_in_V_user_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_post_in_V_user_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_post_in_V_user_V, AESL_token); // pop_size
			int aesl_tmp_4 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_4; i++)
			{
				post_in.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_post_in_V_user_V, AESL_token); // [[/transaction]]
		}

		// pop stream input: "time_stamp"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_time_stamp_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_time_stamp_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_time_stamp_V, AESL_token); // pop_size
			int aesl_tmp_7 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_7; i++)
			{
				time_stamp.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_time_stamp_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "spk_out_stream"
		std::vector<spk_stream > aesl_tmp_9;
		int aesl_tmp_10;
		int aesl_tmp_11 = 0;

		// read output stream size: "spk_out_stream"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_id_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_id_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_id_V, AESL_token); // pop_size
			aesl_tmp_10 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_id_V, AESL_token); // [[/transaction]]
		}

		// output port post check: "spk_out_stream_V_id_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_id_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_id_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_id_V, AESL_token); // data

			std::vector<sc_bv<6> > spk_out_stream_V_id_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'spk_out_stream_V_id_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'spk_out_stream_V_id_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					spk_out_stream_V_id_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_id_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_spk_out_stream_V_id_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_10)
			{
				aesl_tmp_10 = i;
			}

			if (aesl_tmp_10 > 0 && aesl_tmp_9.size() < aesl_tmp_10)
			{
				int aesl_tmp_9_size = aesl_tmp_9.size();

				for (int tmp_aesl_tmp_9 = 0; tmp_aesl_tmp_9 < aesl_tmp_10 - aesl_tmp_9_size; tmp_aesl_tmp_9++)
				{
					spk_stream tmp;
					aesl_tmp_9.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: spk_out_stream_V_id_V
				{
					// bitslice(5, 0)
					// {
						// celement: spk_out_stream.V.id.V(5, 0)
						// {
							sc_lv<6>* spk_out_stream_V_id_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<6>[aesl_tmp_10 - aesl_tmp_11];
						// }
					// }

					// bitslice(5, 0)
					{
						int hls_map_index = 0;
						// celement: spk_out_stream.V.id.V(5, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_9[0].id) != NULL) // check the null address if the c port is array or others
									{
										spk_out_stream_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(5, 0) = sc_bv<6>(spk_out_stream_V_id_V_pc_buffer[hls_map_index].range(5, 0));
									}
								}
							}
						}
					}

					// bitslice(5, 0)
					{
						int hls_map_index = 0;
						// celement: spk_out_stream.V.id.V(5, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_9[i_0].id
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_9[0].id
									// output_left_conversion : aesl_tmp_9[i_0].id
									// output_type_conversion : (spk_out_stream_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_9[0].id) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_9[i_0].id = (spk_out_stream_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "spk_out_stream_V_user"
		aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_user, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_user, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_user, AESL_token); // data

			std::vector<sc_bv<32> > spk_out_stream_V_user_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'spk_out_stream_V_user', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'spk_out_stream_V_user', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					spk_out_stream_V_user_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_user, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_spk_out_stream_V_user))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_10)
			{
				aesl_tmp_10 = i;
			}

			if (aesl_tmp_10 > 0 && aesl_tmp_9.size() < aesl_tmp_10)
			{
				int aesl_tmp_9_size = aesl_tmp_9.size();

				for (int tmp_aesl_tmp_9 = 0; tmp_aesl_tmp_9 < aesl_tmp_10 - aesl_tmp_9_size; tmp_aesl_tmp_9++)
				{
					spk_stream tmp;
					aesl_tmp_9.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: spk_out_stream_V_user
				{
					// bitslice(31, 0)
					// {
						// celement: spk_out_stream.V.user(31, 0)
						// {
							sc_lv<32>* spk_out_stream_V_user_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_10 - aesl_tmp_11];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: spk_out_stream.V.user(31, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_9[0].user) != NULL) // check the null address if the c port is array or others
									{
										spk_out_stream_V_user_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(31, 0) = sc_bv<32>(spk_out_stream_V_user_pc_buffer[hls_map_index].range(31, 0));
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: spk_out_stream.V.user(31, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_9[i_0].user
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_9[0].user
									// output_left_conversion : aesl_tmp_9[i_0].user
									// output_type_conversion : (spk_out_stream_V_user_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_uint64()
									if (&(aesl_tmp_9[0].user) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_9[i_0].user = (spk_out_stream_V_user_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_uint64();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "spk_out_stream_V_data_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_data_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_data_V, AESL_token); // data

			std::vector<sc_bv<32> > spk_out_stream_V_data_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'spk_out_stream_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'spk_out_stream_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					spk_out_stream_V_data_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_spk_out_stream_V_data_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_spk_out_stream_V_data_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_10)
			{
				aesl_tmp_10 = i;
			}

			if (aesl_tmp_10 > 0 && aesl_tmp_9.size() < aesl_tmp_10)
			{
				int aesl_tmp_9_size = aesl_tmp_9.size();

				for (int tmp_aesl_tmp_9 = 0; tmp_aesl_tmp_9 < aesl_tmp_10 - aesl_tmp_9_size; tmp_aesl_tmp_9++)
				{
					spk_stream tmp;
					aesl_tmp_9.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: spk_out_stream_V_data_V
				{
					// bitslice(31, 0)
					// {
						// celement: spk_out_stream.V.data.V(31, 0)
						// {
							sc_lv<32>* spk_out_stream_V_data_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_10 - aesl_tmp_11];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: spk_out_stream.V.data.V(31, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_9[0].data) != NULL) // check the null address if the c port is array or others
									{
										spk_out_stream_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(31, 0) = sc_bv<32>(spk_out_stream_V_data_V_pc_buffer[hls_map_index].range(31, 0));
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: spk_out_stream.V.data.V(31, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_9[i_0].data
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_9[0].data
									// output_left_conversion : (aesl_tmp_9[i_0].data).range()
									// output_type_conversion : (spk_out_stream_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_9[0].data) != NULL) // check the null address if the c port is array or others
									{
										(aesl_tmp_9[i_0].data).range() = (spk_out_stream_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// push back output stream: "spk_out_stream"
		for (int i = 0; i < aesl_tmp_10; i++)
		{
			spk_out_stream.write(aesl_tmp_9[i]);
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "pre_in_V_user_V"
		char* tvin_pre_in_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_pre_in_V_user_V);
		char* wrapc_stream_size_in_pre_in_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_pre_in_V_user_V);
		char* wrapc_stream_ingress_status_pre_in_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_user_V);

		// "pre_in_V_last"
		char* tvin_pre_in_V_last = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_pre_in_V_last);
		char* wrapc_stream_size_in_pre_in_V_last = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_pre_in_V_last);
		char* wrapc_stream_ingress_status_pre_in_V_last = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_last);

		// "pre_in_V_id_V"
		char* tvin_pre_in_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_pre_in_V_id_V);
		char* wrapc_stream_size_in_pre_in_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_pre_in_V_id_V);
		char* wrapc_stream_ingress_status_pre_in_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_id_V);

		// "pre_in_V_data_V"
		char* tvin_pre_in_V_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_pre_in_V_data_V);
		char* wrapc_stream_size_in_pre_in_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_pre_in_V_data_V);
		char* wrapc_stream_ingress_status_pre_in_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_data_V);

		// "post_in_V_user_V"
		char* tvin_post_in_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_post_in_V_user_V);
		char* wrapc_stream_size_in_post_in_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_post_in_V_user_V);
		char* wrapc_stream_ingress_status_post_in_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_post_in_V_user_V);

		// "post_in_V_last"
		char* tvin_post_in_V_last = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_post_in_V_last);
		char* wrapc_stream_size_in_post_in_V_last = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_post_in_V_last);
		char* wrapc_stream_ingress_status_post_in_V_last = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_post_in_V_last);

		// "post_in_V_id_V"
		char* tvin_post_in_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_post_in_V_id_V);
		char* wrapc_stream_size_in_post_in_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_post_in_V_id_V);
		char* wrapc_stream_ingress_status_post_in_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_post_in_V_id_V);

		// "post_in_V_data_V"
		char* tvin_post_in_V_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_post_in_V_data_V);
		char* wrapc_stream_size_in_post_in_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_post_in_V_data_V);
		char* wrapc_stream_ingress_status_post_in_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_post_in_V_data_V);

		// "time_stamp_V"
		char* tvin_time_stamp_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_time_stamp_V);
		char* wrapc_stream_size_in_time_stamp_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_time_stamp_V);
		char* wrapc_stream_ingress_status_time_stamp_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_time_stamp_V);

		// "spk_out_stream_V_id_V"
		char* tvin_spk_out_stream_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_spk_out_stream_V_id_V);
		char* tvout_spk_out_stream_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_spk_out_stream_V_id_V);
		char* wrapc_stream_size_out_spk_out_stream_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_id_V);
		char* wrapc_stream_egress_status_spk_out_stream_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_spk_out_stream_V_id_V);

		// "spk_out_stream_V_user"
		char* tvin_spk_out_stream_V_user = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_spk_out_stream_V_user);
		char* tvout_spk_out_stream_V_user = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_spk_out_stream_V_user);
		char* wrapc_stream_size_out_spk_out_stream_V_user = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_user);
		char* wrapc_stream_egress_status_spk_out_stream_V_user = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_spk_out_stream_V_user);

		// "spk_out_stream_V_data_V"
		char* tvin_spk_out_stream_V_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_spk_out_stream_V_data_V);
		char* tvout_spk_out_stream_V_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_spk_out_stream_V_data_V);
		char* wrapc_stream_size_out_spk_out_stream_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_data_V);
		char* wrapc_stream_egress_status_spk_out_stream_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_spk_out_stream_V_data_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// dump stream tvin: "pre_in"
		std::vector<spk_struct > aesl_tmp_0;
		int aesl_tmp_1 = 0;
		while (!pre_in.empty())
		{
			aesl_tmp_0.push_back(pre_in.read());
			aesl_tmp_1++;
		}

		// dump stream tvin: "post_in"
		std::vector<spk_struct > aesl_tmp_3;
		int aesl_tmp_4 = 0;
		while (!post_in.empty())
		{
			aesl_tmp_3.push_back(post_in.read());
			aesl_tmp_4++;
		}

		// dump stream tvin: "time_stamp"
		std::vector<int > aesl_tmp_6;
		int aesl_tmp_7 = 0;
		while (!time_stamp.empty())
		{
			aesl_tmp_6.push_back(time_stamp.read());
			aesl_tmp_7++;
		}

		// dump stream tvin: "spk_out_stream"
		std::vector<spk_stream > aesl_tmp_9;
		int aesl_tmp_10 = 0;
		while (!spk_out_stream.empty())
		{
			aesl_tmp_9.push_back(spk_out_stream.read());
			aesl_tmp_10++;
		}

		// push back input stream: "pre_in"
		for (int i = 0; i < aesl_tmp_1; i++)
		{
			pre_in.write(aesl_tmp_0[i]);
		}

		// push back input stream: "post_in"
		for (int i = 0; i < aesl_tmp_4; i++)
		{
			post_in.write(aesl_tmp_3[i]);
		}

		// push back input stream: "time_stamp"
		for (int i = 0; i < aesl_tmp_7; i++)
		{
			time_stamp.write(aesl_tmp_6[i]);
		}

		// push back input stream: "spk_out_stream"
		for (int i = 0; i < aesl_tmp_10; i++)
		{
			spk_out_stream.write(aesl_tmp_9[i]);
		}

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		AESL_ORIG_DUT_spk_packet_rx(pre_in, post_in, time_stamp, spk_out_stream);

		CodeState = DUMP_OUTPUTS;
		// record input size to tv3: "pre_in"
		int aesl_tmp_2 = pre_in.size();

		// record input size to tv3: "post_in"
		int aesl_tmp_5 = post_in.size();

		// record input size to tv3: "time_stamp"
		int aesl_tmp_8 = time_stamp.size();

		// pop output stream: "spk_out_stream"
		int aesl_tmp_11 = aesl_tmp_10;
		aesl_tmp_10 = 0;
     aesl_tmp_9.clear();
		while (!spk_out_stream.empty())
		{
			aesl_tmp_9.push_back(spk_out_stream.read());
			aesl_tmp_10++;
		}

		// [[transaction]]
		sprintf(tvin_pre_in_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_pre_in_V_user_V, tvin_pre_in_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_user_V, tvin_pre_in_V_user_V);

		sc_bv<5>* pre_in_V_user_V_tvin_wrapc_buffer = new sc_bv<5>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: pre_in_V_user_V
		{
			// bitslice(4, 0)
			{
				int hls_map_index = 0;
				// celement: pre_in.V.user.V(4, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].user
							// regulate_c_name       : pre_in_V_user_V
							// input_type_conversion : (aesl_tmp_0[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_0[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<5> pre_in_V_user_V_tmp_mem;
								pre_in_V_user_V_tmp_mem = (aesl_tmp_0[i_0].user).to_string(2).c_str();
								pre_in_V_user_V_tvin_wrapc_buffer[hls_map_index++].range(4, 0) = pre_in_V_user_V_tmp_mem.range(4, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_pre_in_V_user_V, "%s\n", (pre_in_V_user_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_pre_in_V_user_V, tvin_pre_in_V_user_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_pre_in_V_user_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_user_V, stream_ingress_size_pre_in_V_user_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_user_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_pre_in_V_user_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_user_V, stream_ingress_size_pre_in_V_user_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_user_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.pre_in_V_user_V_depth);
		sprintf(tvin_pre_in_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_pre_in_V_user_V, tvin_pre_in_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_user_V, tvin_pre_in_V_user_V);

		// release memory allocation
		delete [] pre_in_V_user_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_pre_in_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_user_V, wrapc_stream_size_in_pre_in_V_user_V);
		sprintf(wrapc_stream_size_in_pre_in_V_user_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_user_V, wrapc_stream_size_in_pre_in_V_user_V);
		sprintf(wrapc_stream_size_in_pre_in_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_user_V, wrapc_stream_size_in_pre_in_V_user_V);

		// [[transaction]]
		sprintf(tvin_pre_in_V_last, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_pre_in_V_last, tvin_pre_in_V_last);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_last, tvin_pre_in_V_last);

		sc_bv<1>* pre_in_V_last_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: pre_in_V_last
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: pre_in.V.last(0, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].last
							// regulate_c_name       : pre_in_V_last
							// input_type_conversion : aesl_tmp_0[i_0].last
							if (&(aesl_tmp_0[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> pre_in_V_last_tmp_mem;
								pre_in_V_last_tmp_mem = aesl_tmp_0[i_0].last;
								pre_in_V_last_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = pre_in_V_last_tmp_mem.range(0, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_pre_in_V_last, "%s\n", (pre_in_V_last_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_pre_in_V_last, tvin_pre_in_V_last);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_pre_in_V_last = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_last, stream_ingress_size_pre_in_V_last.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_last, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_pre_in_V_last--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_last, stream_ingress_size_pre_in_V_last.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_last, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.pre_in_V_last_depth);
		sprintf(tvin_pre_in_V_last, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_pre_in_V_last, tvin_pre_in_V_last);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_last, tvin_pre_in_V_last);

		// release memory allocation
		delete [] pre_in_V_last_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_pre_in_V_last, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_last, wrapc_stream_size_in_pre_in_V_last);
		sprintf(wrapc_stream_size_in_pre_in_V_last, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_last, wrapc_stream_size_in_pre_in_V_last);
		sprintf(wrapc_stream_size_in_pre_in_V_last, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_last, wrapc_stream_size_in_pre_in_V_last);

		// [[transaction]]
		sprintf(tvin_pre_in_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_pre_in_V_id_V, tvin_pre_in_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_id_V, tvin_pre_in_V_id_V);

		sc_bv<6>* pre_in_V_id_V_tvin_wrapc_buffer = new sc_bv<6>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: pre_in_V_id_V
		{
			// bitslice(5, 0)
			{
				int hls_map_index = 0;
				// celement: pre_in.V.id.V(5, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].id
							// regulate_c_name       : pre_in_V_id_V
							// input_type_conversion : (aesl_tmp_0[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_0[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<6> pre_in_V_id_V_tmp_mem;
								pre_in_V_id_V_tmp_mem = (aesl_tmp_0[i_0].id).to_string(2).c_str();
								pre_in_V_id_V_tvin_wrapc_buffer[hls_map_index++].range(5, 0) = pre_in_V_id_V_tmp_mem.range(5, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_pre_in_V_id_V, "%s\n", (pre_in_V_id_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_pre_in_V_id_V, tvin_pre_in_V_id_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_pre_in_V_id_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_id_V, stream_ingress_size_pre_in_V_id_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_id_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_pre_in_V_id_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_id_V, stream_ingress_size_pre_in_V_id_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_id_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.pre_in_V_id_V_depth);
		sprintf(tvin_pre_in_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_pre_in_V_id_V, tvin_pre_in_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_id_V, tvin_pre_in_V_id_V);

		// release memory allocation
		delete [] pre_in_V_id_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_pre_in_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_id_V, wrapc_stream_size_in_pre_in_V_id_V);
		sprintf(wrapc_stream_size_in_pre_in_V_id_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_id_V, wrapc_stream_size_in_pre_in_V_id_V);
		sprintf(wrapc_stream_size_in_pre_in_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_id_V, wrapc_stream_size_in_pre_in_V_id_V);

		// [[transaction]]
		sprintf(tvin_pre_in_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_pre_in_V_data_V, tvin_pre_in_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_data_V, tvin_pre_in_V_data_V);

		sc_bv<32>* pre_in_V_data_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: pre_in_V_data_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: pre_in.V.data.V(31, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].data
							// regulate_c_name       : pre_in_V_data_V
							// input_type_conversion : (aesl_tmp_0[i_0].data).range().to_string(SC_BIN).c_str()
							if (&(aesl_tmp_0[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> pre_in_V_data_V_tmp_mem;
								pre_in_V_data_V_tmp_mem = (aesl_tmp_0[i_0].data).range().to_string(SC_BIN).c_str();
								pre_in_V_data_V_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = pre_in_V_data_V_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_pre_in_V_data_V, "%s\n", (pre_in_V_data_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_pre_in_V_data_V, tvin_pre_in_V_data_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_pre_in_V_data_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_data_V, stream_ingress_size_pre_in_V_data_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_data_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_pre_in_V_data_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_data_V, stream_ingress_size_pre_in_V_data_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_data_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.pre_in_V_data_V_depth);
		sprintf(tvin_pre_in_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_pre_in_V_data_V, tvin_pre_in_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_pre_in_V_data_V, tvin_pre_in_V_data_V);

		// release memory allocation
		delete [] pre_in_V_data_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_pre_in_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_data_V, wrapc_stream_size_in_pre_in_V_data_V);
		sprintf(wrapc_stream_size_in_pre_in_V_data_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_data_V, wrapc_stream_size_in_pre_in_V_data_V);
		sprintf(wrapc_stream_size_in_pre_in_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_pre_in_V_data_V, wrapc_stream_size_in_pre_in_V_data_V);

		// [[transaction]]
		sprintf(tvin_post_in_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_post_in_V_user_V, tvin_post_in_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_user_V, tvin_post_in_V_user_V);

		sc_bv<5>* post_in_V_user_V_tvin_wrapc_buffer = new sc_bv<5>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: post_in_V_user_V
		{
			// bitslice(4, 0)
			{
				int hls_map_index = 0;
				// celement: post_in.V.user.V(4, 0)
				{
					// carray: (0) => (aesl_tmp_4 - aesl_tmp_5 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_4 - aesl_tmp_5 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].user
							// regulate_c_name       : post_in_V_user_V
							// input_type_conversion : (aesl_tmp_3[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_3[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<5> post_in_V_user_V_tmp_mem;
								post_in_V_user_V_tmp_mem = (aesl_tmp_3[i_0].user).to_string(2).c_str();
								post_in_V_user_V_tvin_wrapc_buffer[hls_map_index++].range(4, 0) = post_in_V_user_V_tmp_mem.range(4, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvin_post_in_V_user_V, "%s\n", (post_in_V_user_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_post_in_V_user_V, tvin_post_in_V_user_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_post_in_V_user_V = aesl_tmp_4;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_user_V, stream_ingress_size_post_in_V_user_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_user_V, "\n");

		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			stream_ingress_size_post_in_V_user_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_user_V, stream_ingress_size_post_in_V_user_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_user_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.post_in_V_user_V_depth);
		sprintf(tvin_post_in_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_post_in_V_user_V, tvin_post_in_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_user_V, tvin_post_in_V_user_V);

		// release memory allocation
		delete [] post_in_V_user_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_post_in_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_user_V, wrapc_stream_size_in_post_in_V_user_V);
		sprintf(wrapc_stream_size_in_post_in_V_user_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_user_V, wrapc_stream_size_in_post_in_V_user_V);
		sprintf(wrapc_stream_size_in_post_in_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_user_V, wrapc_stream_size_in_post_in_V_user_V);

		// [[transaction]]
		sprintf(tvin_post_in_V_last, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_post_in_V_last, tvin_post_in_V_last);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_last, tvin_post_in_V_last);

		sc_bv<1>* post_in_V_last_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: post_in_V_last
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: post_in.V.last(0, 0)
				{
					// carray: (0) => (aesl_tmp_4 - aesl_tmp_5 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_4 - aesl_tmp_5 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].last
							// regulate_c_name       : post_in_V_last
							// input_type_conversion : aesl_tmp_3[i_0].last
							if (&(aesl_tmp_3[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> post_in_V_last_tmp_mem;
								post_in_V_last_tmp_mem = aesl_tmp_3[i_0].last;
								post_in_V_last_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = post_in_V_last_tmp_mem.range(0, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvin_post_in_V_last, "%s\n", (post_in_V_last_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_post_in_V_last, tvin_post_in_V_last);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_post_in_V_last = aesl_tmp_4;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_last, stream_ingress_size_post_in_V_last.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_last, "\n");

		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			stream_ingress_size_post_in_V_last--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_last, stream_ingress_size_post_in_V_last.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_last, "\n");
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.post_in_V_last_depth);
		sprintf(tvin_post_in_V_last, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_post_in_V_last, tvin_post_in_V_last);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_last, tvin_post_in_V_last);

		// release memory allocation
		delete [] post_in_V_last_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_post_in_V_last, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_last, wrapc_stream_size_in_post_in_V_last);
		sprintf(wrapc_stream_size_in_post_in_V_last, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_last, wrapc_stream_size_in_post_in_V_last);
		sprintf(wrapc_stream_size_in_post_in_V_last, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_last, wrapc_stream_size_in_post_in_V_last);

		// [[transaction]]
		sprintf(tvin_post_in_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_post_in_V_id_V, tvin_post_in_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_id_V, tvin_post_in_V_id_V);

		sc_bv<6>* post_in_V_id_V_tvin_wrapc_buffer = new sc_bv<6>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: post_in_V_id_V
		{
			// bitslice(5, 0)
			{
				int hls_map_index = 0;
				// celement: post_in.V.id.V(5, 0)
				{
					// carray: (0) => (aesl_tmp_4 - aesl_tmp_5 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_4 - aesl_tmp_5 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].id
							// regulate_c_name       : post_in_V_id_V
							// input_type_conversion : (aesl_tmp_3[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_3[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<6> post_in_V_id_V_tmp_mem;
								post_in_V_id_V_tmp_mem = (aesl_tmp_3[i_0].id).to_string(2).c_str();
								post_in_V_id_V_tvin_wrapc_buffer[hls_map_index++].range(5, 0) = post_in_V_id_V_tmp_mem.range(5, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvin_post_in_V_id_V, "%s\n", (post_in_V_id_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_post_in_V_id_V, tvin_post_in_V_id_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_post_in_V_id_V = aesl_tmp_4;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_id_V, stream_ingress_size_post_in_V_id_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_id_V, "\n");

		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			stream_ingress_size_post_in_V_id_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_id_V, stream_ingress_size_post_in_V_id_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_id_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.post_in_V_id_V_depth);
		sprintf(tvin_post_in_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_post_in_V_id_V, tvin_post_in_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_id_V, tvin_post_in_V_id_V);

		// release memory allocation
		delete [] post_in_V_id_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_post_in_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_id_V, wrapc_stream_size_in_post_in_V_id_V);
		sprintf(wrapc_stream_size_in_post_in_V_id_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_id_V, wrapc_stream_size_in_post_in_V_id_V);
		sprintf(wrapc_stream_size_in_post_in_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_id_V, wrapc_stream_size_in_post_in_V_id_V);

		// [[transaction]]
		sprintf(tvin_post_in_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_post_in_V_data_V, tvin_post_in_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_data_V, tvin_post_in_V_data_V);

		sc_bv<32>* post_in_V_data_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: post_in_V_data_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: post_in.V.data.V(31, 0)
				{
					// carray: (0) => (aesl_tmp_4 - aesl_tmp_5 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_4 - aesl_tmp_5 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].data
							// regulate_c_name       : post_in_V_data_V
							// input_type_conversion : (aesl_tmp_3[i_0].data).range().to_string(SC_BIN).c_str()
							if (&(aesl_tmp_3[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> post_in_V_data_V_tmp_mem;
								post_in_V_data_V_tmp_mem = (aesl_tmp_3[i_0].data).range().to_string(SC_BIN).c_str();
								post_in_V_data_V_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = post_in_V_data_V_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvin_post_in_V_data_V, "%s\n", (post_in_V_data_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_post_in_V_data_V, tvin_post_in_V_data_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_post_in_V_data_V = aesl_tmp_4;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_data_V, stream_ingress_size_post_in_V_data_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_data_V, "\n");

		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			stream_ingress_size_post_in_V_data_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_data_V, stream_ingress_size_post_in_V_data_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_data_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.post_in_V_data_V_depth);
		sprintf(tvin_post_in_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_post_in_V_data_V, tvin_post_in_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_post_in_V_data_V, tvin_post_in_V_data_V);

		// release memory allocation
		delete [] post_in_V_data_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_post_in_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_data_V, wrapc_stream_size_in_post_in_V_data_V);
		sprintf(wrapc_stream_size_in_post_in_V_data_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_data_V, wrapc_stream_size_in_post_in_V_data_V);
		sprintf(wrapc_stream_size_in_post_in_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_post_in_V_data_V, wrapc_stream_size_in_post_in_V_data_V);

		// [[transaction]]
		sprintf(tvin_time_stamp_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_time_stamp_V, tvin_time_stamp_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_time_stamp_V, tvin_time_stamp_V);

		sc_bv<32>* time_stamp_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_7 - aesl_tmp_8];

		// RTL Name: time_stamp_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: time_stamp.V(31, 0)
				{
					// carray: (0) => (aesl_tmp_7 - aesl_tmp_8 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_7 - aesl_tmp_8 - 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : aesl_tmp_6[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : aesl_tmp_6[0]
						// regulate_c_name       : time_stamp_V
						// input_type_conversion : aesl_tmp_6[i_0]
						if (&(aesl_tmp_6[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> time_stamp_V_tmp_mem;
							time_stamp_V_tmp_mem = aesl_tmp_6[i_0];
							time_stamp_V_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = time_stamp_V_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			sprintf(tvin_time_stamp_V, "%s\n", (time_stamp_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_time_stamp_V, tvin_time_stamp_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_time_stamp_V = aesl_tmp_7;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_time_stamp_V, stream_ingress_size_time_stamp_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_time_stamp_V, "\n");

		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			stream_ingress_size_time_stamp_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_time_stamp_V, stream_ingress_size_time_stamp_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_time_stamp_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_7 - aesl_tmp_8, &tcl_file.time_stamp_V_depth);
		sprintf(tvin_time_stamp_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_time_stamp_V, tvin_time_stamp_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_time_stamp_V, tvin_time_stamp_V);

		// release memory allocation
		delete [] time_stamp_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_time_stamp_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_time_stamp_V, wrapc_stream_size_in_time_stamp_V);
		sprintf(wrapc_stream_size_in_time_stamp_V, "%d\n", aesl_tmp_7 - aesl_tmp_8);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_time_stamp_V, wrapc_stream_size_in_time_stamp_V);
		sprintf(wrapc_stream_size_in_time_stamp_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_time_stamp_V, wrapc_stream_size_in_time_stamp_V);

		// [[transaction]]
		sprintf(tvout_spk_out_stream_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_spk_out_stream_V_id_V, tvout_spk_out_stream_V_id_V);

		sc_bv<6>* spk_out_stream_V_id_V_tvout_wrapc_buffer = new sc_bv<6>[aesl_tmp_10 - aesl_tmp_11];

		// RTL Name: spk_out_stream_V_id_V
		{
			// bitslice(5, 0)
			{
				int hls_map_index = 0;
				// celement: spk_out_stream.V.id.V(5, 0)
				{
					// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
					for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_9[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_9[0].id
							// regulate_c_name       : spk_out_stream_V_id_V
							// input_type_conversion : (aesl_tmp_9[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_9[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<6> spk_out_stream_V_id_V_tmp_mem;
								spk_out_stream_V_id_V_tmp_mem = (aesl_tmp_9[i_0].id).to_string(2).c_str();
								spk_out_stream_V_id_V_tvout_wrapc_buffer[hls_map_index++].range(5, 0) = spk_out_stream_V_id_V_tmp_mem.range(5, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_10 - aesl_tmp_11; i++)
		{
			sprintf(tvout_spk_out_stream_V_id_V, "%s\n", (spk_out_stream_V_id_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_spk_out_stream_V_id_V, tvout_spk_out_stream_V_id_V);
		}

		tcl_file.set_num(aesl_tmp_10 - aesl_tmp_11, &tcl_file.spk_out_stream_V_id_V_depth);
		sprintf(tvout_spk_out_stream_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_spk_out_stream_V_id_V, tvout_spk_out_stream_V_id_V);

		// release memory allocation
		delete [] spk_out_stream_V_id_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_spk_out_stream_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_id_V, wrapc_stream_size_out_spk_out_stream_V_id_V);
		sprintf(wrapc_stream_size_out_spk_out_stream_V_id_V, "%d\n", aesl_tmp_10 - aesl_tmp_11);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_id_V, wrapc_stream_size_out_spk_out_stream_V_id_V);
		sprintf(wrapc_stream_size_out_spk_out_stream_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_id_V, wrapc_stream_size_out_spk_out_stream_V_id_V);

		// [[transaction]]
		sprintf(tvout_spk_out_stream_V_user, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_spk_out_stream_V_user, tvout_spk_out_stream_V_user);

		sc_bv<32>* spk_out_stream_V_user_tvout_wrapc_buffer = new sc_bv<32>[aesl_tmp_10 - aesl_tmp_11];

		// RTL Name: spk_out_stream_V_user
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: spk_out_stream.V.user(31, 0)
				{
					// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
					for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_9[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_9[0].user
							// regulate_c_name       : spk_out_stream_V_user
							// input_type_conversion : aesl_tmp_9[i_0].user
							if (&(aesl_tmp_9[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> spk_out_stream_V_user_tmp_mem;
								spk_out_stream_V_user_tmp_mem = aesl_tmp_9[i_0].user;
								spk_out_stream_V_user_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = spk_out_stream_V_user_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_10 - aesl_tmp_11; i++)
		{
			sprintf(tvout_spk_out_stream_V_user, "%s\n", (spk_out_stream_V_user_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_spk_out_stream_V_user, tvout_spk_out_stream_V_user);
		}

		tcl_file.set_num(aesl_tmp_10 - aesl_tmp_11, &tcl_file.spk_out_stream_V_user_depth);
		sprintf(tvout_spk_out_stream_V_user, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_spk_out_stream_V_user, tvout_spk_out_stream_V_user);

		// release memory allocation
		delete [] spk_out_stream_V_user_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_spk_out_stream_V_user, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_user, wrapc_stream_size_out_spk_out_stream_V_user);
		sprintf(wrapc_stream_size_out_spk_out_stream_V_user, "%d\n", aesl_tmp_10 - aesl_tmp_11);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_user, wrapc_stream_size_out_spk_out_stream_V_user);
		sprintf(wrapc_stream_size_out_spk_out_stream_V_user, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_user, wrapc_stream_size_out_spk_out_stream_V_user);

		// [[transaction]]
		sprintf(tvout_spk_out_stream_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_spk_out_stream_V_data_V, tvout_spk_out_stream_V_data_V);

		sc_bv<32>* spk_out_stream_V_data_V_tvout_wrapc_buffer = new sc_bv<32>[aesl_tmp_10 - aesl_tmp_11];

		// RTL Name: spk_out_stream_V_data_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: spk_out_stream.V.data.V(31, 0)
				{
					// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
					for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_9[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_9[0].data
							// regulate_c_name       : spk_out_stream_V_data_V
							// input_type_conversion : (aesl_tmp_9[i_0].data).range().to_string(SC_BIN).c_str()
							if (&(aesl_tmp_9[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> spk_out_stream_V_data_V_tmp_mem;
								spk_out_stream_V_data_V_tmp_mem = (aesl_tmp_9[i_0].data).range().to_string(SC_BIN).c_str();
								spk_out_stream_V_data_V_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = spk_out_stream_V_data_V_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_10 - aesl_tmp_11; i++)
		{
			sprintf(tvout_spk_out_stream_V_data_V, "%s\n", (spk_out_stream_V_data_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_spk_out_stream_V_data_V, tvout_spk_out_stream_V_data_V);
		}

		tcl_file.set_num(aesl_tmp_10 - aesl_tmp_11, &tcl_file.spk_out_stream_V_data_V_depth);
		sprintf(tvout_spk_out_stream_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_spk_out_stream_V_data_V, tvout_spk_out_stream_V_data_V);

		// release memory allocation
		delete [] spk_out_stream_V_data_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_spk_out_stream_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_data_V, wrapc_stream_size_out_spk_out_stream_V_data_V);
		sprintf(wrapc_stream_size_out_spk_out_stream_V_data_V, "%d\n", aesl_tmp_10 - aesl_tmp_11);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_data_V, wrapc_stream_size_out_spk_out_stream_V_data_V);
		sprintf(wrapc_stream_size_out_spk_out_stream_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_spk_out_stream_V_data_V, wrapc_stream_size_out_spk_out_stream_V_data_V);

		// push back output stream: "spk_out_stream"
		for (int i = 0; i < aesl_tmp_10; i++)
		{
			spk_out_stream.write(aesl_tmp_9[i]);
		}

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "pre_in_V_user_V"
		delete [] tvin_pre_in_V_user_V;
		delete [] wrapc_stream_size_in_pre_in_V_user_V;
		// release memory allocation: "pre_in_V_last"
		delete [] tvin_pre_in_V_last;
		delete [] wrapc_stream_size_in_pre_in_V_last;
		// release memory allocation: "pre_in_V_id_V"
		delete [] tvin_pre_in_V_id_V;
		delete [] wrapc_stream_size_in_pre_in_V_id_V;
		// release memory allocation: "pre_in_V_data_V"
		delete [] tvin_pre_in_V_data_V;
		delete [] wrapc_stream_size_in_pre_in_V_data_V;
		// release memory allocation: "post_in_V_user_V"
		delete [] tvin_post_in_V_user_V;
		delete [] wrapc_stream_size_in_post_in_V_user_V;
		// release memory allocation: "post_in_V_last"
		delete [] tvin_post_in_V_last;
		delete [] wrapc_stream_size_in_post_in_V_last;
		// release memory allocation: "post_in_V_id_V"
		delete [] tvin_post_in_V_id_V;
		delete [] wrapc_stream_size_in_post_in_V_id_V;
		// release memory allocation: "post_in_V_data_V"
		delete [] tvin_post_in_V_data_V;
		delete [] wrapc_stream_size_in_post_in_V_data_V;
		// release memory allocation: "time_stamp_V"
		delete [] tvin_time_stamp_V;
		delete [] wrapc_stream_size_in_time_stamp_V;
		// release memory allocation: "spk_out_stream_V_id_V"
		delete [] tvout_spk_out_stream_V_id_V;
		delete [] tvin_spk_out_stream_V_id_V;
		delete [] wrapc_stream_size_out_spk_out_stream_V_id_V;
		// release memory allocation: "spk_out_stream_V_user"
		delete [] tvout_spk_out_stream_V_user;
		delete [] tvin_spk_out_stream_V_user;
		delete [] wrapc_stream_size_out_spk_out_stream_V_user;
		// release memory allocation: "spk_out_stream_V_data_V"
		delete [] tvout_spk_out_stream_V_data_V;
		delete [] tvin_spk_out_stream_V_data_V;
		delete [] wrapc_stream_size_out_spk_out_stream_V_data_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

